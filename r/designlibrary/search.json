[{"path":"https://declaredesign.org/r/designlibrary/PULL_REQUEST_TEMPLATE.html","id":null,"dir":"","previous_headings":"","what":"Description","title":"Description","text":"Please include summary design designer . Please note, designers functions generate designs, added DesignLibrary package, eventually merged CRAN. Designs submitted .Rmd files added table DeclareDesign.org/library package.","code":""},{"path":"https://declaredesign.org/r/designlibrary/PULL_REQUEST_TEMPLATE.html","id":"checklist-for-designers","dir":"","previous_headings":"","what":"Checklist for designers:","title":"Description","text":"Designer documented according contributing guidelines designers Designer vignettes added overview.csv Tests added testthat ensure coverage remains 100% Branch passing devtools::check() 0 errors, warnings, notes","code":""},{"path":"https://declaredesign.org/r/designlibrary/PULL_REQUEST_TEMPLATE.html","id":"checklist-for-designs","dir":"","previous_headings":"","what":"Checklist for designs:","title":"Description","text":"Design created using --date versions packages Design can passed draw_data() diagnose_design() without errors Design documented according contributing guidelines designs Meta-data added overview.csv data required sourced public URLs Branch passing devtools::check() 0 errors, warnings, notes","code":""},{"path":"https://declaredesign.org/r/designlibrary/articles/Example_Design.html","id":"design-declaration","dir":"Articles","previous_headings":"","what":"Design Declaration","title":"Example Design","text":"may want give overview design, provide background info. Model: two untreated potential outcomes, \\(Y_A(0)\\) \\(Y_B(0)\\) distributed standard normally correlated \\(\\rho = .2\\). \\(Y_A(1) = Y_A(0) + \\tau_A\\) \\(Y_B(1) = Y_B(0) + \\tau_B\\). Inquiry: want know value \\(E[Y_A(1) - Y_A(0)]\\). Data strategy: Half units assigned treatment, \\(Z_A\\), affects \\(Y_A\\). Units also independently assigned \\(Z_B\\), treatment affects \\(Y_B\\). Answer strategy: compare two strategies: one simply regress \\(Y_A\\) indicator \\(Z_A\\), use include system seemingly unrelated regressions (SUR) second equation \\(Y_B\\) \\(Z_B\\).","code":""},{"path":"https://declaredesign.org/r/designlibrary/articles/Example_Design.html","id":"design-code","dir":"Articles","previous_headings":"","what":"Design code","title":"Example Design","text":"often, designs require custom functions data cleaning. may want separately design declaration. make custom sur() function use seemingly unrelated regression estimator systemfit::systemfit. Now declare design code.","code":"sur <- function(data){   fit <- data.frame(summary(systemfit(formula = list(YA ~ ZA,                                                       YB ~ ZB),                                       data = data,                                       method = \"SUR\"))$coefficients)   names(fit) <- c(\"estimate\",\"std.error\",\"statistic\",\"p.value\")   fit$conf.low <- with(fit, estimate - 1.96 * std.error)   fit$conf.high <- with(fit, estimate + 1.96 * std.error)   fit <- cbind(estimator = \"SUR\",                term = row.names(fit),                fit,                 df = NA,                 outcome = \"YA\",                inquiry = \"ate_YA\")   row.names(fit) <- NULL   fit <- subset(fit, term == \"eq1_ZA\")   return(fit) } my_design <-    # Model   declare_population(N = 100,                      YA_0 = rnorm(N),                      YB_0 = rnorm(N, YA_0 * rho, sqrt(1 - rho^2))) +   declare_potential_outcomes(YA ~ YA_0 + ZA * tau_A,                              assignment_variable = \"ZA\") +   declare_potential_outcomes(YB ~ YB_0 + ZB * tau_B,                              assignment_variable = \"ZB\") +   # Inquiry   declare_inquiry(ate_YA = mean(YA_ZA_1 - YA_ZA_0)) +   # Data Strategy   declare_assignment(m = 50, assignment_variable = \"ZA\") +   declare_assignment(m = 50, assignment_variable = \"ZB\") +   declare_reveal(YA,ZA) +   declare_reveal(YB,ZB) +   # Answer Strategy   declare_estimator(YA ~ ZA, model = lm_robust,                      inquiry = \"ate_YA\", label = \"lm_robust\") +   declare_estimator(handler = sur)"},{"path":"https://declaredesign.org/r/designlibrary/articles/Example_Design.html","id":"design-diagnosis","dir":"Articles","previous_headings":"","what":"Design diagnosis","title":"Example Design","text":"may want display features design . see SUR approach exhibits much lower variance estimates much higher power \\(\\rho\\) high.","code":"my_design_cor <- redesign(design = my_design, rho = .8) diagnosis <- diagnose_design(my_design, my_design_cor, sims = 25) kable(reshape_diagnosis(diagnosis), digits = 2)"},{"path":"https://declaredesign.org/r/designlibrary/articles/How_to_Write_and_Contribute_Designers.html","id":"essential-and-optional-features","dir":"Articles","previous_headings":"","what":"Essential and Optional Features","title":"How to Write and Contribute Designers","text":"bare minimum, designer must: take design parameters arguments return designs created DeclareDesign return designs code generated attribute well-documented pass tests checks DesignLibrary package Optionally, want designer work DDWizard Shiny App, need add following attributes designer: description - brief description design html code definitions - data.frame following columns: | - names - names every design argument | - tips - short description design argument (order names) | - class - class argument value (e.g., “character”, “logical”, “integer”, “numeric”) | - vector - logical vector whether argument value vector | - min - minimum possible numeric value argument (NA numeric integer) | - max - minimum possible numeric value argument (NA numeric integer) | - inspector_min - minimum (reasonable) value argument (used preset fill-ins app include Inf values) | - inspector_step - amount arguments reasonably vary (allows preset argument variations app)","code":""},{"path":"https://declaredesign.org/r/designlibrary/articles/How_to_Write_and_Contribute_Designers.html","id":"a-minimal-example","dir":"Articles","previous_headings":"","what":"A Minimal Example","title":"How to Write and Contribute Designers","text":"following code creates designer creates simple two-arm experiment size, N, assigning units treatment probability prob. Note code added attribute design using construct_design_code. ’ll discuss features designer .","code":"my_designer <- function(N = 100,                         prob = .5){   if(0 > prob | 1 < prob) stop(\"prob must be in [0,1]\")   if(1 > N) stop(\"design must have at least two units\")   {{{      model <- declare_model(N = N, noise = rnorm(N), potential_outcomes(Y ~ Z + noise))     assignment <- declare_assignment(Z = complete_ra(N, prob = prob))     estimand <- declare_inquiry(ATE = mean(Y_Z_1 - Y_Z_0))     estimator <- declare_estimator(Y ~ Z, inquiry = estimand)     measurement <- declare_measurement(Y = reveal_outcomes(Y ~ Z))     my_design <-        model +       estimand +       assignment +       measurement +       estimator   }}}   attr(my_design, \"code\") <- DesignLibrary:::construct_design_code(designer = my_designer,                                                                    args =  match.call.defaults())   my_design }"},{"path":"https://declaredesign.org/r/designlibrary/articles/How_to_Write_and_Contribute_Designers.html","id":"including-code-in-design-attributes","dir":"Articles","previous_headings":"","what":"Including Code in Design Attributes","title":"How to Write and Contribute Designers","text":"’ve devised easy way include code design objects returned designer. can use method!","code":""},{"path":"https://declaredesign.org/r/designlibrary/articles/How_to_Write_and_Contribute_Designers.html","id":"our-method-for-adding-code","dir":"Articles","previous_headings":"","what":"Our method for adding code","title":"How to Write and Contribute Designers","text":"One easy way add code designs designer returns use triple braces method. checks (look see whether prob 0 1) come opening triple braces,  {{{ . , code needed build design goes triple braces: function construct_design_code goes designer extracts code  {{{   }}} . , match.call.defaults() checks arguments user gave function, adds top extracted code list looks like : Thus, following code example adds code generated design made my_designer:","code":"{{{      model <- declare_model(N = N, noise = rnorm(N), potential_outcomes(Y ~ Z + noise))     assignment <- declare_assignment(Z = complete_ra(N, prob = prob))     estimand <- declare_inquiry(ATE = mean(Y_Z_1 - Y_Z_0))     estimator <- declare_estimator(Y ~ Z, inquiry = estimand)     measurement <- declare_measurement(Y = reveal_outcomes(Y ~ Z))     my_design <-        model +       estimand +       assignment +       measurement +       estimator }}} N <- 100                                                        prob <- 0.5 attr(my_design, \"code\") <- construct_design_code(designer = my_designer,                                                  args =  match.call.defaults())"},{"path":"https://declaredesign.org/r/designlibrary/articles/How_to_Write_and_Contribute_Designers.html","id":"an-alternative-method","dir":"Articles","previous_headings":"","what":"An alternative method","title":"How to Write and Contribute Designers","text":"’s one example alternative way embed code created design returned designer: Methods like can helpful need build long strings code fly (say, multi-arm experiment, study variable number estimands).","code":"my_designer <- function(N = 100,                         prob = .5){   design_code <- paste0(     \"model <- declare_model(N = \",N,\", noise = rnorm(N), potential_outcomes(Y ~ Z + noise))     assignment <- declare_assignment(Z = complete_ra(N, prob = \",prob,\"))     estimand <- declare_inquiry(ATE = mean(Y_Z_1 - Y_Z_0))     estimator <- declare_estimator(Y ~ Z, inquiry = estimand)     measurement <- declare_measurement(Y = reveal_outcomes(Y ~ Z))     my_design <-        model +       estimand +       assignment +       measurement +       estimator\")   my_design <- eval(parse(text = design_code))   attr(my_design, \"code\") <- design_code   my_design }"},{"path":"https://declaredesign.org/r/designlibrary/articles/How_to_Write_and_Contribute_Designers.html","id":"attributes-needed-for-shiny-integration","dir":"Articles","previous_headings":"","what":"Attributes Needed for Shiny Integration","title":"How to Write and Contribute Designers","text":"want designer work shiny app, three attributes give designer (note: attributes design – get added designer function defined). First, need provide shiny_arguments – list scalar-valued vectors whose names correspond subset arguments designer. parameters DDWizard allow inputs : can add brief description html sit atop shiny app.","code":"attr(my_designer,\"definitions\") <-   data.frame(     names = c(\"N\", \"prob\"),     tips = c(\"Sample size\", \"Probability of assignment to treatment\"),     class = c(\"integer\", \"numeric\"),     vector = c(FALSE, FALSE),     min = c(4, 0),     max = c(Inf, ),     inspector_min = c(100, .1),     inspector_step = c(10, .2)     ) attr(my_designer, \"description\") <- \" <p> A design of sample size <code>N<\/code> and probability of assignment <code>prob<\/code>. \""},{"path":"https://declaredesign.org/r/designlibrary/articles/How_to_Write_and_Contribute_Designers.html","id":"contributing-designers","dir":"Articles","previous_headings":"","what":"Contributing Designers","title":"How to Write and Contribute Designers","text":"designer added DesignLibrary using pull request.","code":""},{"path":"https://declaredesign.org/r/designlibrary/articles/How_to_Write_and_Contribute_Designers.html","id":"how-to-document-your-designer","dir":"Articles","previous_headings":"","what":"How to document your designer","title":"How to Write and Contribute Designers","text":"documentation must written Roxygen comments come top designer code; begin title short description designer . relevant, mention key limitations designer add notes can help others understand code better. Next, list describe arguments needed design code following syntax, @param name Description. also specify output designer using tag @return provide example contains executable code. can also add keywords reference related designs designers. Finally, give credit work.","code":"#' Create a design #' #' This designer builds a design with \\code{N} units.  #' #' Key limitations: ate cannot be specified #'  #' Note: Units are assigned to treatment with probability \\code{prob} using complete random assignment   #' #' @param N A integer. Sample size #' @param prob A number within the interval [0,1]. Probability of assigment to treatment. #' @return A design. #' @examples #' To make a design using default arguments: #' my_design <- my_designer() #' #' @concept two arm design #' @seealso \\code{\\link{my_design}} \\code{\\link{two_arm_designer}} #'  #' @author \\href{https://declaredesign.org/}{DeclareDesign Team} #' @export"},{"path":"https://declaredesign.org/r/designlibrary/articles/How_to_Write_and_Contribute_Designs.html","id":"contributing-designs","dir":"Articles","previous_headings":"","what":"Contributing designs","title":"How to Write and Contribute Designs","text":"design submitted DesignLibrary .Rmd vignette located vignette subfolder github repository: see . submit design via pull request https://github.com/DeclareDesign/DesignLibrary/. typically involve forking repository, creating new branch, adding design vignettes folder, submitting pull request DeclareDesign/DesignLibrary repository. submit pull request, see pull request template, contains checklist. checklist covers additional points addressed .","code":""},{"path":"https://declaredesign.org/r/designlibrary/articles/How_to_Write_and_Contribute_Designs.html","id":"meta-data","dir":"Articles","previous_headings":"","what":"Meta-data","title":"How to Write and Contribute Designs","text":"order design appear table DeclareDesign.org/library, need add meta-data design overview.csv file located DesignLibrary/inst/extdata. add row : name design design leave designer blank put name vignette file without .Rmd extension vignette add keywords keywords, separated commas leave shiny blank can put name author link website twitter handle author_url","code":""},{"path":"https://declaredesign.org/r/designlibrary/articles/How_to_Write_and_Contribute_Designs.html","id":"external-data","dir":"Articles","previous_headings":"","what":"External data","title":"How to Write and Contribute Designs","text":"often, complicated designs rely external data. design requires external data run, please make sure sourced vignette publicly accessible URL. accept objects pull request aside .Rmd file.","code":""},{"path":"https://declaredesign.org/r/designlibrary/articles/How_to_Write_and_Contribute_Designs.html","id":"if-in-doubt","dir":"Articles","previous_headings":"","what":"If in doubt…","title":"How to Write and Contribute Designs","text":"Just post issue ’ll get right .","code":""},{"path":"https://declaredesign.org/r/designlibrary/articles/binary_iv.html","id":"design-declaration","dir":"Articles","previous_headings":"","what":"Design Declaration","title":"Binary Instrumental Variable","text":"Model: assume sample three four possible compliance types sample \\(N\\) farmers: always-takers, never-takers, compliers. order monotonicy assumption hold, assume defiers sample (farmers adopt fertilizer use given voucher, adopt given voucher). define \\(X(Z)\\) \\(Z \\{0,1}\\) type: consider population size \\(N\\) define potential outcome \\(Y\\) (case crop yield) linear function form \\(Y_{,type} = \\alpha_{type} + \\beta_{type} * X_i + \\delta_{type} * Z_i + u_y\\), \\(u_y\\) normally distributed individual-level shock. consider treatment heterogeneous effects among different complier types. Inquiry: Firstly, define first-stage effect \\(Z\\) \\(X\\) \\(E[X(Z=1) - X(Z=0)]\\). second estimand interest average effect fertilizer use (endogenous treatment, \\(X\\)), crop productivity: \\(ATE = E[Y(X = 1) - Y(X = 0)]\\). Thirdly, interested average treatment effect among compliers (farmers use fertilizers awarded vouchers use given voucher): \\(LATE = E[Y(X = 1) - Y(X = 0) | type_i = complier]\\). Lastly, monotonicity hold, independence exclusion restriction , define estimand weighted average treatment effects compliers defiers: \\(LATE_{het} = \\frac{Pr(type = c)}{Pr(type = c) - Pr(type = d)}*E[Y_i(1)-Y_i(0)| type = c] - \\frac{Pr(type = d)}{Pr(type = c) - Pr(type = d)}*E[Y_i(1)-Y_i(0)| type = d]\\), \\(c\\) \\(d\\) compliers defiers, respectively (see Imbens 2014: 34). Data strategy: collect survey data representative sample 400 farmers randomly assign fertilizer vouchers probability 0.5. Answer strategy: estimate first-stage effect calculating difference--means estimator function \\(X ~ Z\\). estimation \\(ATE\\), \\(LATE\\), \\(LATE_{het}\\) estimate effect endogenous treatment \\(X\\) \\(Y\\) use two-stage least squares (2SLS) estimation.","code":"N <- 100 type_probs <- c(0, 0, 1, 0) assignment_probs <- c(0.5, 0.5, 0.5, 0.5) outcome_sd <- 1 a <- c(1, 0, 0, 0) b <- c(0.5, 0.5, 0.5, 0.5) d <- c(0, 0, 0, 0)  population <- declare_population(N = N, type = sample(1:4,      N, replace = TRUE, prob = type_probs), type_label = c(\"Always\",      \"Never\", \"Complier\", \"Defier\")[type], u_Z = runif(N),      u_Y = rnorm(N) * outcome_sd, Z = (u_Z < assignment_probs[type]),      X = (type == 1) + (type == 3) * Z + (type == 4) * (1 -          Z)) potential_outcomes <- declare_potential_outcomes(Y ~ a[type] +      b[type] * X + d[type] * Z + u_Y, assignment_variables = \"X\") reveal <- declare_reveal(outcome_variables = Y, assignment_variables = \"X\") estimand <- declare_inquiry(first_stage = mean((type == 3) -      (type == 4)), ate = mean(Y_X_1 - Y_X_0), late = mean(Y_X_1[type ==      3] - Y_X_0[type == 3]), late_het = (mean(type == 3) *      mean(Y_X_1[type == 3] - Y_X_0[type == 3]) - mean(type ==      4) * mean(Y_X_1[type == 4] - Y_X_0[type == 4]))/(mean(type ==      3) - mean(type == 4))) estimator_1 <- declare_estimator(X ~ Z, model = difference_in_means,      inquiry = \"first_stage\", label = \"d-i-m\") estimator_2 <- declare_estimator(Y ~ X, inquiry = c(\"ate\",      \"late\", \"late_het\"), model = lm_robust, label = \"lm_robust\") estimator_3 <- declare_estimator(Y ~ X | Z, inquiry = c(\"ate\",      \"late\", \"late_het\"), model = iv_robust, label = \"iv_robust\") binary_iv_design <- population + potential_outcomes + reveal +      estimand + estimator_1 + estimator_2 + estimator_3"},{"path":"https://declaredesign.org/r/designlibrary/articles/binary_iv.html","id":"takeaways","dir":"Articles","previous_headings":"","what":"Takeaways","title":"Binary Instrumental Variable","text":"now diagnose design compare estimates designs violate first three assumptions one one. also compare estimates across designs assume violation monotonicity assumption homogeneous heterogeneous treatment effects across complier types. highlight takeaways. Firstly, estimates unbiased assumption hold. show violating first three assumptions yields biased estimates. absence monotonicity assumption, IV estimates less biased LATE ATE estimand presence heterogeneous treatment effects. Moreover, cases, IV best estimating weighted average treatment effects compliers defiers (\\(LATE_{het}\\)).","code":"# Violate relevance of instrument for treatment (no first-stage effects) iv_nonrelevant <- binary_iv_designer(N = 500, assignment_probs = c(.2, .3, .7, .5), b_Y = .5)  # Violate relevance of instrument for treatment (no first-stage effects) iv_nonrandom   <- binary_iv_designer(type_probs = c(.5,.5, 0, 0), b_Y = .5)  # Violate exclusion restriction iv_nonexcl     <- binary_iv_designer(d_Y = .1) # Violates monotonicity with homogeneous treatment effects iv_defiers <- binary_iv_designer(type_probs = c(0,0,.8,.2))  # Violates monotonicity with heterogeneous treatment effects iv_het     <- binary_iv_designer(type_probs = c(0,0,.8,.2),                                   b = c(0.5, 0.5, 0.5, 0)) diagnoses <- diagnose_designs(iv_nonrelevant, iv_nonrandom,                                iv_nonexcl, iv_defiers, iv_het, sims = 25) kable(diagnoses_table[   diagnoses_table$`Inquiry` %in% c(\"late\", \"ate\") &     diagnoses_table$`Design` %in% c(\"binary_iv_design\",\"iv_nonrelevant\",                                            \"iv_nonrandom\", \"iv_nonexcl\"),   c(1:3, 6, 8, 14)], digits = 2) kable(diagnoses_table[diagnoses_table$`Inquiry` %in% c(\"ate\", \"late\", \"late_het\") &                         diagnoses_table$`Design` %in% c(\"iv_defiers\", \"iv_het\") &                         diagnoses_table$Bias!= \"NA\",c(1:3, 6, 8,14)], digits = 2)"},{"path":"https://declaredesign.org/r/designlibrary/articles/binary_iv.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Binary Instrumental Variable","text":"Imbens, Guido. 2014. “Instrumental Variables: Econometrician’s Perspective.” National Bureau Economic Research.","code":""},{"path":"https://declaredesign.org/r/designlibrary/articles/block_cluster_two_arm.html","id":"design-declaration","dir":"Articles","previous_headings":"","what":"Design Declaration","title":"Block-Cluster-Two-Arm Design","text":"Model: specify population N units partitioned N_blocks (regions, say). block N_clusters_in_block clusters (cities, say) within cluster N_in_cluster individuals. variance individual’s outcomes three components: block’s variance, cluster’s variance subject’s variance. Inquiry: interested average difference individuals’ treatment control outcomes, \\(E[Y_i(Z = 1) - Y_i(Z = 0)]\\). Data strategy: units randomization cities (clusters). Cities blocked region ensure equal numbers cities region included control treatment. individuals belonging city either treated assigned control. Answer strategy: estimate average treatment effect using linear model accounts block structure clusters.","code":"N_blocks <- 4 N_clusters_in_block <- 4 N_i_in_cluster <- 5 sd_block <- 0.5773 sd_cluster <- 2 sd_i_0 <- 0 sd_i_1 <- 0 rho <- 1 assignment_probs <- 0.5 control_mean <- 0 treatment_mean <- 0 verbose <- TRUE  population <- declare_population(blocks = add_level(N = N_blocks,      u_b = rnorm(N) * sd_block), clusters = add_level(N = N_clusters_in_block,      u_c = rnorm(N) * sd_cluster, cluster_size = N_i_in_cluster),      i = add_level(N = N_i_in_cluster, u_0 = rnorm(N) * sd_i_0,          u_1 = rnorm(n = N, mean = rho * scale(u_0), sd = sqrt(1 -              rho^2)) * sd_i_1)) potential_outcomes <- declare_potential_outcomes(Y ~ (1 -      Z) * (control_mean + u_0 + u_b + u_c) + Z * (treatment_mean +      u_1 + u_b + u_c)) estimand <- declare_inquiry(ATE = mean(Y_Z_1 - Y_Z_0)) assignment <- declare_assignment(Z = block_and_cluster_ra(block_prob = assignment_probs,      blocks = blocks, clusters = clusters)) reveal <- declare_reveal(Y, Z) estimator <- declare_estimator(Y ~ Z, inquiry = estimand,      model = lm_robust, fixed_effects = ~blocks, clusters = clusters) block_cluster_two_arm_design <- population + potential_outcomes +      estimand + assignment + reveal + estimator"},{"path":"https://declaredesign.org/r/designlibrary/articles/block_cluster_two_arm.html","id":"takeaways","dir":"Articles","previous_headings":"","what":"Takeaways","title":"Block-Cluster-Two-Arm Design","text":"better illustrate different sources variance differentially affect power, compare three designs. features design 50 blocks featuring two clusters , 10 individuals per cluster. design effect size .25 standard deviation outcome 1 (possible designer defaults variance individual shock total variance =1). first, variance derives differences individuals, second derives differences clusters, third derives variance blocks. Diagnosis reveals efficiency greatest variance comes blocks, lowest comes clusters. reason estimator models block-level variance, can estimate treatment effect independently block-level effects treatment assignment orthogonal blocks. However, variance cluster level covaries treatment, thus makes harder estimate treatment effect.","code":"individual_var <- block_cluster_two_arm_designer(N_blocks = 50,                                                   N_clusters_in_block = 2,                                                   N_i_in_cluster = 10,                                                   sd_block = 0,                                                  sd_cluster = 0,                                                  ate = .25) ## [1] \"The implied ICC in (control) is 0\" ## [1] \"The implied ICC in (control) conditional on block is  0\" cluster_var   <- block_cluster_two_arm_designer(N_blocks = 50,                                                   N_clusters_in_block = 2,                                                  N_i_in_cluster = 10,                                                   sd_block = 0,                                                  sd_cluster = .99,                                                  ate = .25) ## [1] \"The implied ICC in (control) is 0.98\" ## [1] \"The implied ICC in (control) conditional on block is  0.98\" block_var     <- block_cluster_two_arm_designer(N_blocks = 50,                                                   N_clusters_in_block = 2,                                                  N_i_in_cluster = 10,                                                   sd_block = .99,                                                  sd_cluster = 0,                                                  ate = .25) ## [1] \"The implied ICC in (control) is 0.98\" ## [1] \"The implied ICC in (control) conditional on block is  0\" diagnosis <- diagnose_design(individual_var, cluster_var, block_var, sims = 25) ## Warning: We recommend you choose a number of simulations higher than 30. ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning: We recommend you choose a number of simulations higher than 30. ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning: We recommend you choose a number of simulations higher than 30. ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), fixed_effects = ~~blocks, clusters = ~clusters, : ## The argument 'model = ' is deprecated. Please use '.method = ' instead."},{"path":"https://declaredesign.org/r/designlibrary/articles/block_cluster_two_arm.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Block-Cluster-Two-Arm Design","text":"Gerber, Alan S., Donald P. Green. 2012. Field Experiments: Design, Analysis, Interpretation. New York: W.W. Norton.","code":""},{"path":"https://declaredesign.org/r/designlibrary/articles/cluster_sampling.html","id":"design-declaration","dir":"Articles","previous_headings":"","what":"Design Declaration","title":"Cluster Sampling","text":"Model: specify variable interest \\(Y\\) (political ideology, say) discrete variable ranging 1 (liberal) 7 (conservative). define functional model since interested population mean \\(Y\\). model also includes information number sampled clusters number individuals per cluster. Inquiry: estimand population mean political identification \\(Y\\). employed random sampling, can expect value sample mean (\\(\\widehat{\\overline{y}}\\)) approximate true population parameter (\\(\\widehat{\\overline{Y}}\\)). Data strategy: Sampling follows two-stage strategy. first draw random sample 30 counties California, county select 20 individuals random. guarantees county probability included sample resident within county probability sample. design estimate \\(Y\\) n = 600 respondents. Answer strategy: estimate population mean sample mean estimator: \\(\\widehat{\\overline{Y}} = \\frac{1}{n} \\sum_1^n Y_i\\), estimate standard errors assumption independent heteroskedastic errors well cluster-robust standard errors take account correlation errors within clusters. demonstrate imprecision estimated \\(\\widehat{\\overline{Y}}\\) cluster standard errors presence intracluster correlation coefficient (ICC) 0.402.","code":"N_blocks <- 1 N_clusters_in_block <- 1000 N_i_in_cluster <- 50 n_clusters_in_block <- 30 n_i_in_cluster <- 20 icc <- 0.402  fixed_pop <- declare_population(block = add_level(N = N_blocks),      cluster = add_level(N = N_clusters_in_block), subject = add_level(N = N_i_in_cluster,          latent = draw_normal_icc(mean = 0, N = N, clusters = cluster,              ICC = icc), Y = draw_ordered(x = latent, breaks = qnorm(seq(0,              1, length.out = 8)))))() population <- declare_population(data = fixed_pop) estimand <- declare_inquiry(mean(Y), label = \"Ybar\") stage_1_sampling <- declare_sampling(S1 = strata_and_cluster_rs(strata = block,      clusters = cluster, n = n_clusters_in_block), filter = S1 ==      1) stage_2_sampling <- declare_sampling(S2 = strata_rs(strata = cluster,      n = n_i_in_cluster), filter = S2 == 1) clustered_ses <- declare_estimator(Y ~ 1, model = lm_robust,      clusters = cluster, inquiry = estimand, label = \"Clustered Standard Errors\") cluster_sampling_design <- population + estimand + stage_1_sampling +      stage_2_sampling + clustered_ses"},{"path":"https://declaredesign.org/r/designlibrary/articles/cluster_sampling.html","id":"takeaways","dir":"Articles","previous_headings":"","what":"Takeaways","title":"Cluster Sampling","text":"appreciate role clustering better also plot simulated values estimand standard errors clustered clustered standard errors. first add additional estimator design take account clusters.  figure may give us impression estimate clustered standard errors less precise, fact, correctly accounts uncertainty surrounding estimates. blue lines graph demonstrate estimates simulations contain estimand. table graphs show, share simulations total number simulations, also known coverage, (correctly) close 95% estimations clustered standard errors 54% estimations without clustered standard errors. expected, mean estimate bias specifications.","code":"diagnosis <- diagnose_design(cluster_sampling_design, sims = 25) ## Warning: We recommend you choose a number of simulations higher than 30. ## Warning in fn(data, ~(Y ~ 1), clusters = ~cluster, model = ~lm_robust): The ## argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ 1), clusters = ~cluster, model = ~lm_robust): The ## argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ 1), clusters = ~cluster, model = ~lm_robust): The ## argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ 1), clusters = ~cluster, model = ~lm_robust): The ## argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ 1), clusters = ~cluster, model = ~lm_robust): The ## argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ 1), clusters = ~cluster, model = ~lm_robust): The ## argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ 1), clusters = ~cluster, model = ~lm_robust): The ## argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ 1), clusters = ~cluster, model = ~lm_robust): The ## argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ 1), clusters = ~cluster, model = ~lm_robust): The ## argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ 1), clusters = ~cluster, model = ~lm_robust): The ## argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ 1), clusters = ~cluster, model = ~lm_robust): The ## argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ 1), clusters = ~cluster, model = ~lm_robust): The ## argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ 1), clusters = ~cluster, model = ~lm_robust): The ## argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ 1), clusters = ~cluster, model = ~lm_robust): The ## argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ 1), clusters = ~cluster, model = ~lm_robust): The ## argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ 1), clusters = ~cluster, model = ~lm_robust): The ## argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ 1), clusters = ~cluster, model = ~lm_robust): The ## argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ 1), clusters = ~cluster, model = ~lm_robust): The ## argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ 1), clusters = ~cluster, model = ~lm_robust): The ## argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ 1), clusters = ~cluster, model = ~lm_robust): The ## argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ 1), clusters = ~cluster, model = ~lm_robust): The ## argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ 1), clusters = ~cluster, model = ~lm_robust): The ## argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ 1), clusters = ~cluster, model = ~lm_robust): The ## argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ 1), clusters = ~cluster, model = ~lm_robust): The ## argument 'model = ' is deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ 1), clusters = ~cluster, model = ~lm_robust): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. new_design <- cluster_sampling_design + declare_estimator(Y ~ 1,                                         model = lm_robust,                                         inquiry = estimand,                                         label = \"Naive Standard Errors\") diagnosis <- diagnose_design(new_design, sims = 25)"},{"path":"https://declaredesign.org/r/designlibrary/articles/cluster_sampling.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Cluster Sampling","text":"Murray, David M. 1998. Design Analysis Group-Randomized Trials. Vol. 29. Monographs Epidemiology & B.","code":""},{"path":"https://declaredesign.org/r/designlibrary/articles/factorial.html","id":"design-declaration","dir":"Articles","previous_headings":"","what":"Design Declaration","title":"Factorial Designs","text":"Model: stipulate \\(2^k\\) potential outcomes. example, treatments \\(\\{,B,C\\} \\\\{0,1\\}\\), \\(Y^{ABC}\\). can denote potential outcome unit control treatments \\(Y^{000}_i\\), example, unit assigned B C \\(Y^{011}\\). potential outcome distributed normally mean \\(\\mu_j\\) standard deviation \\(\\sigma_j\\), \\(j \\\\{1,...,2^k\\}\\). Inquiry: Estimands defined combination treatment assignment weighted averages differences potential outcomes. effect design, \\(\\tau_A\\), averaged conditions defined B C, given : \\(\\tau_A = 1/4*(Y^{111} - Y^{011}) + 1/4*(Y^{101} - Y^{001}) + 1/4*(Y^{110} - Y^{010}) + 1/4*(Y^{100} - Y^{000})\\). Data strategy: randomly assign units one \\(2^k\\) combinations treatment using equal probabilities assignment. Answer strategy: Estimates draw regression treatments demeaned weighted inverse probability condition . demeaned regression, constant captures average outcome across conditions — outcome units control condition.","code":"N <- 256 outcome_means <- c(0, 0, 0, 0, 0, 0, 0, 0) outcome_sds <- c(1, 1, 1, 1, 1, 1, 1, 1)  population <- declare_population(N) potential_outcomes <- declare_potential_outcomes(Y_0_0_0 = outcome_means[1L] + rnorm(N,      0, outcome_sds[1L]), Y_1_0_0 = outcome_means[2L] + rnorm(N,      0, outcome_sds[2L]), Y_0_1_0 = outcome_means[3L] + rnorm(N,      0, outcome_sds[3L]), Y_1_1_0 = outcome_means[4L] + rnorm(N,      0, outcome_sds[4L]), Y_0_0_1 = outcome_means[5L] + rnorm(N,      0, outcome_sds[5L]), Y_1_0_1 = outcome_means[6L] + rnorm(N,      0, outcome_sds[6L]), Y_0_1_1 = outcome_means[7L] + rnorm(N,      0, outcome_sds[7L]), Y_1_1_1 = outcome_means[8L] + rnorm(N,      0, outcome_sds[8L])) reveal_Y <- declare_reveal(handler = function(data) {     potential_cols <- mapply(paste, data[, c(\"T1\", \"T2\", \"T3\"     ), drop = FALSE], sep = \"_\", SIMPLIFY = FALSE)     potential_cols <- do.call(paste, c(\"Y\", potential_cols, sep = \"_\"))     upoc <- unique(potential_cols)     df <- data[, upoc, drop = FALSE]     R <- seq_len(nrow(df))     C <- match(potential_cols, colnames(df))     data[, \"Y\"] <- df[cbind(R, C)]     data }) estimand <- declare_inquiry(Overall_average = mean(0.125 * Y_0_0_0 + 0.125 *      Y_0_0_1 + 0.125 * Y_0_1_0 + 0.125 * Y_0_1_1 + 0.125 * Y_1_0_0 +      0.125 * Y_1_0_1 + 0.125 * Y_1_1_0 + 0.125 * Y_1_1_1), te_T3 = mean(-0.25 *      Y_0_0_0 + 0.25 * Y_0_0_1 + -0.25 * Y_0_1_0 + 0.25 * Y_0_1_1 +      -0.25 * Y_1_0_0 + 0.25 * Y_1_0_1 + -0.25 * Y_1_1_0 + 0.25 *      Y_1_1_1), te_T2 = mean(-0.25 * Y_0_0_0 + -0.25 * Y_0_0_1 +      0.25 * Y_0_1_0 + 0.25 * Y_0_1_1 + -0.25 * Y_1_0_0 + -0.25 *      Y_1_0_1 + 0.25 * Y_1_1_0 + 0.25 * Y_1_1_1), `te_T2:T3` = mean(0.5 *      Y_0_0_0 + -0.5 * Y_0_0_1 + -0.5 * Y_0_1_0 + 0.5 * Y_0_1_1 +      0.5 * Y_1_0_0 + -0.5 * Y_1_0_1 + -0.5 * Y_1_1_0 + 0.5 * Y_1_1_1),      te_T1 = mean(-0.25 * Y_0_0_0 + -0.25 * Y_0_0_1 + -0.25 *          Y_0_1_0 + -0.25 * Y_0_1_1 + 0.25 * Y_1_0_0 + 0.25 * Y_1_0_1 +          0.25 * Y_1_1_0 + 0.25 * Y_1_1_1), `te_T1:T3` = mean(0.5 *          Y_0_0_0 + -0.5 * Y_0_0_1 + 0.5 * Y_0_1_0 + -0.5 * Y_0_1_1 +          -0.5 * Y_1_0_0 + 0.5 * Y_1_0_1 + -0.5 * Y_1_1_0 + 0.5 *          Y_1_1_1), `te_T1:T2` = mean(0.5 * Y_0_0_0 + 0.5 * Y_0_0_1 +          -0.5 * Y_0_1_0 + -0.5 * Y_0_1_1 + -0.5 * Y_1_0_0 + -0.5 *          Y_1_0_1 + 0.5 * Y_1_1_0 + 0.5 * Y_1_1_1), `te_T1:T2:T3` = mean(-1 *          Y_0_0_0 + 1 * Y_0_0_1 + 1 * Y_0_1_0 + -1 * Y_0_1_1 +          1 * Y_1_0_0 + -1 * Y_1_0_1 + -1 * Y_1_1_0 + 1 * Y_1_1_1),      label = \"ATE\") assignment_factors <- declare_assignment(Z = complete_ra(N, conditions = 1:(2^3), prob_each = c(0.125,  0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125)), Z_cond_prob = obtain_condition_probabilities(assignment = Z,      conditions = 1:(2^3), prob_each = c(0.125, 0.125, 0.125,      0.125, 0.125, 0.125, 0.125, 0.125))) assignment <- declare_step(fabricate, T1 = as.numeric(Z %in% c(2L, 4L, 6L,  8L)), T2 = as.numeric(Z %in% c(3L, 4L, 7L, 8L)), T3 = as.numeric(Z %in%      5:8)) estimator <- declare_estimator(handler = label_estimator(function(data) {     data[, names(data) %in% c(\"T1\", \"T2\", \"T3\")] <- data[, names(data) %in%          c(\"T1\", \"T2\", \"T3\")] - 0.5     mod <- lm_robust(formula = Y ~ T1 * T2 * T3, data = data,          weights = 1/Z_cond_prob)     estimate_df <- tidy(mod)     estimate_df$inquiry <- paste0(\"te_\", estimate_df$term)     estimate_df$inquiry[estimate_df$inquiry == \"te_(Intercept)\"] <- \"Overall_average\"     estimate_df })) factorial_design <- population + potential_outcomes + assignment_factors +      assignment + reveal_Y + estimand + estimator"},{"path":"https://declaredesign.org/r/designlibrary/articles/factorial.html","id":"takeaways","dir":"Articles","previous_headings":"","what":"Takeaways","title":"Factorial Designs","text":"see space estimands can estimate amazingly rich, power low.","code":"diagnosis <- diagnose_design(factorial_design, sims = 25) ## Warning: We recommend you choose a number of simulations higher than 30."},{"path":"https://declaredesign.org/r/designlibrary/articles/mediation_analysis.html","id":"design-declaration","dir":"Articles","previous_headings":"","what":"Design Declaration","title":"Mediation Analysis Design","text":"Model: specify population size \\(N\\). Individuals population two potential outcomes related mediator. \\(M_i(Z_i=0):\\) value mediator \\(M\\) unit \\(\\) control group, \\(M_i(Z_i=1):\\) value mediator \\(M\\) unit \\(\\) treated. Additionally, individuals four potential outcomes related \\(Y\\). Two can observed treatment control conditions. \\(Y_i(Z_i=0 , M_i(Z_i=0)):\\) outcome unit \\(\\) treatment absent mediator takes value treatment absent. \\(Y_i(Z_i=1 , M_i(Z_i=1)):\\) outcome unit \\(\\) treatment present mediator takes value treatment present. two complex potential outcomes. \\(Y_i(Z_i=1 , M_i(Z_i=0)):\\) outcome unit \\(\\) treatment present mediator takes value treatment absent. \\(Y_i(Z_i=0 , M_i(Z_i=1)):\\) outcome unit \\(\\) treatment absent mediator takes value treatment present. Thus data generating process specify defines \\(Y\\) function \\(M\\) \\(Z\\) \\(M\\) function \\(Z\\). Inquiry: interested average effects treatment mediator, \\(M\\), direct average effects treatment \\(Y\\) effects \\(Y\\) \\(Z\\) run \\(M\\). Data strategy: use assign units treatment using complete random assignment. Answer strategy: First, regress \\(M\\) \\(Z\\). regress \\(Y\\) \\(M\\) \\(Z\\).","code":"N <- 200 a <- 1 b <- 0.4 c <- 0 d <- 0.5 rho <- 0  population <- declare_population(N = N, e1 = rnorm(N), e2 = rnorm(n = N,      mean = rho * e1, sd = sqrt(1 - rho^2))) POs_M <- declare_potential_outcomes(M ~ 1 * (a * Z + e1 >      0)) POs_Y <- declare_potential_outcomes(Y ~ d * Z + b * M + c *      M * Z + e2, conditions = list(M = 0:1, Z = 0:1)) POs_Y_nat_0 <- declare_potential_outcomes(Y_nat0_Z_0 = b *      M_Z_0 + e2, Y_nat0_Z_1 = d + b * M_Z_0 + c * M_Z_0 +      e2) POs_Y_nat_1 <- declare_potential_outcomes(Y_nat1_Z_0 = b *      M_Z_1 + e2, Y_nat1_Z_1 = d + b * M_Z_1 + c * M_Z_1 +      e2) estimands <- declare_inquiries(FirstStage = mean(M_Z_1 -      M_Z_0), Indirect_0 = mean(Y_M_1_Z_0 - Y_M_0_Z_0), Indirect_1 = mean(Y_M_1_Z_1 -      Y_M_0_Z_1), Controlled_Direct_0 = mean(Y_M_0_Z_1 - Y_M_0_Z_0),      Controlled_Direct_1 = mean(Y_M_1_Z_1 - Y_M_1_Z_0), Natural_Direct_0 = mean(Y_nat0_Z_1 -          Y_nat0_Z_0), Natural_Direct_1 = mean(Y_nat1_Z_1 -          Y_nat1_Z_0)) assignment <- declare_assignment(Z = complete_ra(N, prob = 0.5)) reveal_M <- declare_reveal(M, Z) reveal_Y <- declare_reveal(Y, assignment_variable = c(\"M\",      \"Z\")) reveal_nat0 <- declare_reveal(Y_nat0) reveal_nat1 <- declare_reveal(Y_nat1) manipulation <- declare_step(Not_M = 1 - M, handler = fabricate) mediator_regression <- declare_estimator(M ~ Z, model = lm_robust,      inquiry = \"FirstStage\", label = \"Stage 1\") stage2_1 <- declare_estimator(Y ~ Z * M, model = lm_robust,      term = c(\"M\"), inquiry = c(\"Indirect_0\"), label = \"Stage 2\") stage2_2 <- declare_estimator(Y ~ Z * M, model = lm_robust,      term = c(\"Z\"), inquiry = c(\"Controlled_Direct_0\", \"Natural_Direct_0\"),      label = \"Direct_0\") stage2_3 <- declare_estimator(Y ~ Z * Not_M, model = lm_robust,      term = c(\"Z\"), inquiry = c(\"Controlled_Direct_1\", \"Natural_Direct_1\"),      label = \"Direct_1\") mediation_analysis_design <- population + POs_M + POs_Y +      POs_Y_nat_0 + POs_Y_nat_1 + estimands + assignment +      reveal_M + reveal_Y + reveal_nat0 + reveal_nat1 + manipulation +      mediator_regression + stage2_1 + stage2_2 + stage2_3"},{"path":"https://declaredesign.org/r/designlibrary/articles/mediation_analysis.html","id":"takeaways","dir":"Articles","previous_headings":"","what":"Takeaways","title":"Mediation Analysis Design","text":"diagnose two versions design: one correlation error term mediator regression one outcome regression (\\(\\rho\\)) greater zero, another \\(\\rho\\) equals zero. diagnosis indicates error terms correlated, direct indirect effects can estimated without bias. contrast, \\(\\rho\\) equal zero, regression underestimates effect mediator \\(Y\\) overstates direct effects \\(Z\\) \\(Y\\). Unfortunately, assumption correlation always guaranteed, since \\(M\\) assigned random might correlated \\(Y\\).","code":"designs <- expand_design(mediation_analysis_designer, rho = c(0,.5)) diagnosis <- diagnose_design(designs, sims = 25) ## Warning: We recommend you choose a number of simulations higher than 30. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning: We recommend you choose a number of simulations higher than 30. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(M ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"M\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z * Not_M), model = ~lm_robust, term = ~c(\"Z\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead."},{"path":"https://declaredesign.org/r/designlibrary/articles/mediation_analysis.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further Reading","title":"Mediation Analysis Design","text":"Gerber, Alan S., Donald P. Green. 2012. Field Experiments: Design, Analysis, Interpretation. New York: W.W. Norton. Imai, Kosuke, Luke Keele, Dustin Tingley, Teppei Yamamoto. 2011. “Unpacking Black Box Causality: Learning Causal Mechanisms Experimental Observational Studies.” American Political Science Review 105 (4): 765–89.","code":""},{"path":"https://declaredesign.org/r/designlibrary/articles/multi_arm.html","id":"design-declaration","dir":"Articles","previous_headings":"","what":"Design Declaration","title":"Multi-Arm Experiment","text":"Model: specify population size \\(N\\) unit \\(\\) potential outcome, \\(Y_i(Z = 0)\\), remains untreated \\(M\\) \\((m = 1, 2, ..., M)\\) potential outcomes defined according treatment receives. effect treatment outcome unit \\(\\) equal difference potential outcome treatment condition \\(m\\) control condition: \\(Y_i(Z = m) -Y_i(Z = 0)\\). Inquiry: interested pairwise comparisons arms: \\(E[Y(m) - Y(m')]\\), \\(m \\\\{1,...,M\\}\\). Data strategy: randomly assign \\(k/N\\) units treatment arms. Answer strategy: take every pairwise difference means corresponding specific estimand.","code":"N <- 30 outcome_means <- c(0.5, 1, 2, 0.5) sd_i <- 1 outcome_sds <- c(0, 0, 0, 0)  population <- declare_population(N = N, u_1 = rnorm(N, 0, outcome_sds[1L]),      u_2 = rnorm(N, 0, outcome_sds[2L]), u_3 = rnorm(N, 0, outcome_sds[3L]),      u_4 = rnorm(N, 0, outcome_sds[4L]), u = rnorm(N) * sd_i) potential_outcomes <- declare_potential_outcomes(formula = Y ~ (outcome_means[1] +      u_1) * (Z == \"1\") + (outcome_means[2] + u_2) * (Z == \"2\") +      (outcome_means[3] + u_3) * (Z == \"3\") + (outcome_means[4] +      u_4) * (Z == \"4\") + u, conditions = c(\"1\", \"2\", \"3\", \"4\"),      assignment_variables = Z) estimand <- declare_inquiries(ate_Y_2_1 = mean(Y_Z_2 - Y_Z_1), ate_Y_3_1 = mean(Y_Z_3 -      Y_Z_1), ate_Y_4_1 = mean(Y_Z_4 - Y_Z_1), ate_Y_3_2 = mean(Y_Z_3 -      Y_Z_2), ate_Y_4_2 = mean(Y_Z_4 - Y_Z_2), ate_Y_4_3 = mean(Y_Z_4 -      Y_Z_3)) assignment <- declare_assignment(Z = complete_ra(N, num_arms = 4, conditions = c(\"1\",  \"2\", \"3\", \"4\"))) reveal_Y <- declare_reveal(assignment_variables = Z) estimator <- declare_estimator(handler = function(data) {     estimates <- rbind.data.frame(ate_Y_2_1 = difference_in_means(formula = Y ~          Z, data = data, condition1 = \"1\", condition2 = \"2\"),          ate_Y_3_1 = difference_in_means(formula = Y ~ Z, data = data,              condition1 = \"1\", condition2 = \"3\"), ate_Y_4_1 = difference_in_means(formula = Y ~              Z, data = data, condition1 = \"1\", condition2 = \"4\"),          ate_Y_3_2 = difference_in_means(formula = Y ~ Z, data = data,              condition1 = \"2\", condition2 = \"3\"), ate_Y_4_2 = difference_in_means(formula = Y ~              Z, data = data, condition1 = \"2\", condition2 = \"4\"),          ate_Y_4_3 = difference_in_means(formula = Y ~ Z, data = data,              condition1 = \"3\", condition2 = \"4\"))     names(estimates)[names(estimates) == \"N\"] <- \"N_DIM\"     estimates$estimator <- c(\"DIM (Z_2 - Z_1)\", \"DIM (Z_3 - Z_1)\",      \"DIM (Z_4 - Z_1)\", \"DIM (Z_3 - Z_2)\", \"DIM (Z_4 - Z_2)\",      \"DIM (Z_4 - Z_3)\")     estimates$inquiry <- rownames(estimates)     estimates$estimate <- estimates$coefficients     estimates$term <- NULL     return(estimates) }) multi_arm_design <- population + potential_outcomes + assignment +      reveal_Y + estimand + estimator"},{"path":"https://declaredesign.org/r/designlibrary/articles/multi_arm.html","id":"takeaways","dir":"Articles","previous_headings":"","what":"Takeaways","title":"Multi-Arm Experiment","text":"pairwise differences means provide unbiased estimates average treatment effect (ATE) arm. estimates, however, precise. estimated standard deviation large yielding wide confidence intervals contain true value ATEs 95% time.","code":"diagnosis <- diagnose_design(multi_arm_design, sims = 25)"},{"path":"https://declaredesign.org/r/designlibrary/articles/pretest_posttest.html","id":"design-declaration","dir":"Articles","previous_headings":"","what":"Design Declaration","title":"Pre-Test Post-Test Design","text":"Model: define population size \\(N\\), effect time \\(t = 1\\) (pre-program) \\(t = 2\\) (post-program) taken normal distribution mean 0 standard deviation smaller 1. assume pre- post-test outcomes highly positively correlated (\\(\\rho = 0.5\\)). also expect subjects leave study rate 10%, meaning observe post-treatment outcomes tenth sample. Inquiry: wish know average effect family pregnancy programs \\(Z\\) rates teenage pregnancy. Formally: \\(E[Y(Z = 1) - Y(Z = 0) \\mid t = 2]\\), \\(Z = 1\\) denotes assignment program. Data strategy: observe incidence teenage pregnancy (\\(Y_i\\)) individual \\(\\) sample 100 individuals time \\(t = 1\\) (just prior treatment) time \\(t = 2\\) (year treatment). randomly assign 50 100 women ages 15 19 receive treatment. Answer strategy: define three estimators. First, estimate effects ``change score’’: dependent variable defined difference observed post- pre-treatment outcomes. second estimator treats post-treatment outcome dependent variable, conditions pre-treatment outcome righthand side regression. Finally, also look effects use post-test outcome measures, evaluate gain using baseline.","code":"N <- 100 ate <- 0.25 sd_1 <- 1 sd_2 <- 1 rho <- 0.5 attrition_rate <- 0.1  population <- declare_population(N = N, u_t1 = rnorm(N) *      sd_1, u_t2 = rnorm(N, rho * scale(u_t1), sqrt(1 - rho^2)) *      sd_2, Y_t1 = u_t1) potential_outcomes <- declare_potential_outcomes(Y_t2 ~ u_t2 +      ate * Z) estimand <- declare_inquiry(ATE = mean(Y_t2_Z_1 - Y_t2_Z_0)) assignment <- declare_assignment(Z = complete_ra(N)) report <- declare_assignment(R = complete_ra(N, prob = 1 -      attrition_rate)) reveal_t2 <- declare_reveal(Y_t2) manipulation <- declare_step(difference = (Y_t2 - Y_t1),      handler = fabricate) pretest_lhs <- declare_estimator(difference ~ Z, model = lm_robust,      inquiry = estimand, subset = R == 1, label = \"Change score\") pretest_rhs <- declare_estimator(Y_t2 ~ Z + Y_t1, model = lm_robust,      inquiry = estimand, subset = R == 1, label = \"Condition on pretest\") posttest_only <- declare_estimator(Y_t2 ~ Z, model = lm_robust,      inquiry = estimand, label = \"Posttest only\") pretest_posttest_design <- population + potential_outcomes +      estimand + assignment + reveal_t2 + report + manipulation +      pretest_lhs + pretest_rhs + posttest_only"},{"path":"https://declaredesign.org/r/designlibrary/articles/pretest_posttest.html","id":"takeaways","dir":"Articles","previous_headings":"","what":"Takeaways","title":"Pre-Test Post-Test Design","text":"see change score approach less powerful even naive estimator! ’s essentially sums variances periods. time invariant noise compounded summing.","code":"diagnosis <- diagnose_design(pretest_posttest_design, sims = 25) ## Warning: We recommend you choose a number of simulations higher than 30. ## Warning in fn(data, ~(difference ~ Z), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z + Y_t1), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(difference ~ Z), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z + Y_t1), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(difference ~ Z), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z + Y_t1), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(difference ~ Z), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z + Y_t1), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(difference ~ Z), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z + Y_t1), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(difference ~ Z), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z + Y_t1), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(difference ~ Z), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z + Y_t1), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(difference ~ Z), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z + Y_t1), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(difference ~ Z), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z + Y_t1), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(difference ~ Z), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z + Y_t1), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(difference ~ Z), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z + Y_t1), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(difference ~ Z), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z + Y_t1), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(difference ~ Z), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z + Y_t1), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(difference ~ Z), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z + Y_t1), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(difference ~ Z), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z + Y_t1), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(difference ~ Z), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z + Y_t1), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(difference ~ Z), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z + Y_t1), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(difference ~ Z), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z + Y_t1), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(difference ~ Z), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z + Y_t1), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(difference ~ Z), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z + Y_t1), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(difference ~ Z), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z + Y_t1), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(difference ~ Z), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z + Y_t1), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(difference ~ Z), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z + Y_t1), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(difference ~ Z), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z + Y_t1), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(difference ~ Z), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z + Y_t1), subset = ~R == 1, model = ~lm_robust): ## The argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y_t2 ~ Z), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead."},{"path":"https://declaredesign.org/r/designlibrary/articles/process_tracing.html","id":"design-declaration","dir":"Articles","previous_headings":"","what":"Design Declaration","title":"Process-Tracing","text":"Model: Logically, four possible causal relationships \\(X\\) \\(Y\\): Natural resources cause civil war present, resulting absence civil war natural resources absent (\\(X\\) causes \\(Y\\)). presence natural resources thing preventing war, absence causes civil war (\\(\\neg X\\) causes \\(Y\\)). Civil war might happen irrespective whether natural resources present (\\(Y\\) irrespective \\(X\\)). Civil war might happen irrespective whether natural resources present (\\(\\neg Y\\) irrespective \\(X\\)) model world specifies probability given country natural resources well (independent) proportion countries one causal pathways 1-4. Inquiry: want figure , case chose, civil war happened natural resources (\\(H\\)) happened regardless natural resources (\\(\\neg H\\)). Data strategy: pick one case \\(X\\) \\(Y\\) true (country natural resources civil war happened). Answer strategy: ’ll evaluate likelihood causal hypothesis, \\(H\\), looking evidence, \\(E\\), less surprising see \\(X\\) truly cause \\(Y\\). Specifically, ’ll use Bayes’ rule figure \\(Pr(H \\mid E)\\): posterior probability \\(X\\) caused \\(Y\\) case chose, given evidence found. make function calculates \\(Pr(H \\mid E) = \\frac{Pr(H) Pr(E|H)}{Pr(H)Pr(E\\mid(H)) + Pr(\\neg H)Pr(E\\mid\\neg H)}\\). use Bayes’ rule conjunction evidence, need specify things. First, prior \\(Pr(H)\\) hypothesis true. Second third, need state probabilities observe piece evidence hypothesis true (\\(Pr(E|H)\\)) false (\\(Pr(E|\\neg H)\\)). Let’s say, example, \\(E_1\\) national army taking control natural resources civil war. ’s likely happen natural resources caused war. might say \\(Pr(E_1 \\mid H) = .8\\). even natural resources didn’t cause war, national army might still take natural resources reasons, say \\(Pr(E_1 \\mid \\neg H) = .2\\). type clue often called “straw---wind” (SIW): expect see \\(H\\) true, ’s completely surprising see \\(H\\) false. might look second clue: just prior civil war, armed group created whose main name, aims, ideology centered around capture control natural resources, also one main antagonists? Observing clue really unlikely overall, even \\(H\\) true. ’s informative observed, since ’s unlikely happen \\(H\\) true: make second clue “smoking gun” (SMG). Let’s say \\(Pr(E_2 \\mid H) = .3, Pr(E_2 \\mid \\neg H) = 0\\). ’ll compare approaches researcher doesn’t look evidence, looks SIW, looks SMG. practice, researchers seldom pre-commit updating single piece evidence, search multiple clues updating cause effects hypotheses jointly. fact requires specify joint distribution clues. often good reason think clues correlated, conditional hypothesis true false: example, fact armed group formed order take resources (\\(E_2\\)) might convince government take natural resource (\\(E_1\\)), dissuade !","code":"N <- 100 prob_X <- 0.5 process_proportions <- c(0.25, 0.25, 0.25, 0.25) prior_H <- 0.5 p_E1_H <- 0.8 p_E1_not_H <- 0.2 p_E2_H <- 0.3 p_E2_not_H <- 0 cor_E1E2_H <- 0 cor_E1E2_not_H <- 0 label_E1 <- \"Straw in the Wind\" label_E2 <- \"Smoking Gun\"  population <- declare_population(N = N, causal_process = sample(x = c(\"X_causes_Y\",      \"Y_regardless\", \"X_causes_not_Y\", \"not_Y_regardless\"),      size = N, replace = TRUE, prob = process_proportions),      X = rbinom(N, 1, prob_X) == 1, Y = (X & causal_process ==          \"X_causes_Y\") | (!X & causal_process == \"X_causes_not_Y\") |          (causal_process == \"Y_regardless\")) select_case <- declare_sampling(S = strata_rs(strata = paste(X,      Y), strata_n = c(X0Y0 = 0, X0Y1 = 0, X1Y0 = 0, X1Y1 = 1))) estimand <- declare_inquiry(did_X_cause_Y = causal_process ==      \"X_causes_Y\") joint_prob <- function(p1, p2, rho) {     r <- rho * (p1 * p2 * (1 - p1) * (1 - p2))^0.5     c(p00 = (1 - p1) * (1 - p2) + r, p01 = p2 * (1 - p1) -          r, p10 = p1 * (1 - p2) - r, p11 = p1 * p2 + r) } joint_prob_H <- joint_prob(p_E1_H, p_E2_H, cor_E1E2_H) joint_prob_not_H <- joint_prob(p_E1_not_H, p_E2_not_H, cor_E1E2_not_H) trace_processes <- declare_step(test_results = sample(c(\"00\",      \"01\", \"10\", \"11\"), 1, prob = ifelse(rep(causal_process ==      \"X_causes_Y\", 4), joint_prob_H, joint_prob_not_H)), E1 = test_results ==      \"10\" | test_results == \"11\", E2 = test_results == \"01\" |      test_results == \"11\", handler = fabricate) bayes_rule <- function(p_H, p_E_H, p_E_not_H) {     p_E_H * p_H/(p_E_H * p_H + p_E_not_H * (1 - p_H)) } prior_only <- function(data) {     return(with(data, data.frame(posterior_H = bayes_rule(p_H = prior_H,          p_E_H = 1, p_E_not_H = 1), result = TRUE))) } E1_only <- function(data) {     return(with(data, data.frame(posterior_H = bayes_rule(p_H = prior_H,          p_E_H = ifelse(E1, p_E1_H, 1 - p_E1_H), p_E_not_H = ifelse(E1,              p_E1_not_H, 1 - p_E1_not_H)), result = E1))) } E2_only <- function(data) {     return(with(data, data.frame(posterior_H = bayes_rule(p_H = prior_H,          p_E_H = ifelse(E2, p_E2_H, 1 - p_E2_H), p_E_not_H = ifelse(E2,              p_E2_not_H, 1 - p_E2_not_H)), result = E2))) } E1_and_E2 <- function(data) {     return(with(data, data.frame(posterior_H = bayes_rule(p_H = prior_H,          p_E_H = joint_prob_H[c(\"00\", \"01\", \"10\", \"11\") %in%              test_results], p_E_not_H = joint_prob_not_H[c(\"00\",              \"01\", \"10\", \"11\") %in% test_results]), result = test_results))) } prior_only_estimator <- declare_estimator(handler = label_estimator(prior_only),      label = \"No tests (Prior)\", inquiry = estimand) E1_only_estimator <- declare_estimator(handler = label_estimator(E1_only),      label = label_E1, inquiry = estimand) E2_only_estimator <- declare_estimator(handler = label_estimator(E2_only),      label = label_E2, inquiry = estimand) E1_and_E2_estimator <- declare_estimator(handler = label_estimator(E1_and_E2),      label = paste(label_E1, \"and\", label_E2), inquiry = estimand) process_tracing_design <- population + select_case + trace_processes +      estimand + prior_only_estimator + E1_only_estimator +      E2_only_estimator + E1_and_E2_estimator"},{"path":"https://declaredesign.org/r/designlibrary/articles/process_tracing.html","id":"takeaways","dir":"Articles","previous_headings":"","what":"Takeaways","title":"Process-Tracing","text":"’ll look four approaches (tests, SIW , SMG , SIW + SMG) perform terms RMSE across different levels correlation clues \\(H\\) true.  expected, using data gets better answers average: RMSE highest process-tracing, lowest clues used, middling one clue used. conventional wisdom,2 however, straw---wind outperforms smoking gun. ’s somewhat surprising, since smoking gun perfectly informative observed, whereas observing straw---wind leaves open possibility hypothesis false. researcher still making mistakes straw---wind, ’re observing frequently, opportunities update right direction. contrast, smoking gun rare: many times observed, researcher downweights posterior probability \\(H\\). Compared gun, straw less wrong often. Notice gains joint approach much greater clues negatively correlated positively correlated. feature arises pieces evidence carry less independent information positively correlated. see , suppose perfectly correlated, seeing one guaranteed also present. case, additional information gleaned observation one clue observed: effectively equivalent tests. Collier, David. 2011. “Understanding Process Tracing.” PS: Political Science & Politics 44 (4): 823–30. Fairfield, Tasha, Andrew E. Charman. 2017. “Explicit Bayesian Analysis Process Tracing: Guidelines, Opportunities, Caveats.” Political Analysis 25 (3): 363–80.","code":"designs <- expand_design(designer = process_tracing_designer,cor_E1E2_H = c(-.32, 0, .32))  diagnose_designs(designs, sims = 25) %>%    get_diagnosands() %>%    ggplot(aes(cor_E1E2_H, rmse, color = estimator, group = estimator)) +   geom_point() + geom_line() + theme_bw() ## Warning: We recommend you choose a number of simulations higher than 30.  ## Warning: We recommend you choose a number of simulations higher than 30.  ## Warning: We recommend you choose a number of simulations higher than 30."},{"path":"https://declaredesign.org/r/designlibrary/articles/randomized_response.html","id":"design-declaration","dir":"Articles","previous_headings":"","what":"Design Declaration","title":"Randomized Response","text":"Model: Respondents expected answer sensitive question probability \\(p\\) (known quantity). \\(L_i\\) latent binary response sensitive question equals 0 respondent \\(\\) engage IPV 1 . defined design prevalence rate. \\(Y_i\\) response observed researchers randomized approach. \\(D_i\\) response direct question whether respondent engages IPV. expect respondents engage IPV inclined misreport asked answer directly (define withholding rate). Inquiry: estimand rate intimate partner violence studied locality, population mean L. Formally, expect \\(Pr(Y_i = 1) = p + (1-p)Pr(L_i = 1)\\). Data strategy: collect survey data representative sample 1,000 individuals respondents assigned respond “Yes” probability \\(p = \\frac{4}{6}\\) truthfully probability \\(1 - p = \\frac{1}{3}\\). Answer strategy: estimate population rate IPV two ways: firstly averaging responses observed via direct question (\\(\\hat{\\bar{L}} = \\bar{D}\\)), secondly via randomized response: \\(\\hat{\\bar{L}} = \\frac{\\bar{Y} - p}{1 - p}\\).","code":"N <- 1000 prob_forced_yes <- 0.6 prevalence_rate <- 0.1 withholding_rate <- 0.5  population <- declare_population(N = N, sensitive_trait = draw_binary(prob = prevalence_rate,      N = N), withholder = draw_binary(prob = sensitive_trait *      withholding_rate, N = N), direct_answer = sensitive_trait -      withholder) potential_outcomes <- declare_potential_outcomes(Y_Z_Yes = 1,      Y_Z_Truth = sensitive_trait) estimand <- declare_inquiry(true_rate = mean(sensitive_trait)) assignment <- declare_assignment(Z = complete_ra(N, prob = prob_forced_yes,      conditions = c(\"Truth\", \"Yes\"))) estimator_randomized_response <- declare_estimator(handler = label_estimator(function(data) with(data,      data.frame(estimate = (mean(Y) - prob_forced_yes)/(1 -          prob_forced_yes)))), inquiry = estimand, label = \"Forced Randomized Response\") estimator_direct_question <- declare_estimator(handler = label_estimator(function(data) with(data,      data.frame(estimate = mean(direct_answer)))), inquiry = estimand,      label = \"Direct Question\") randomized_response_design <- population + assignment + potential_outcomes +      estimand + declare_reveal(Y, Z) + estimator_randomized_response +      estimator_direct_question randomized_response_design <- set_diagnosands(randomized_response_design,      declare_diagnosands(bias = mean(estimate - estimand)))"},{"path":"https://declaredesign.org/r/designlibrary/articles/randomized_response.html","id":"takeaways","dir":"Articles","previous_headings":"","what":"Takeaways","title":"Randomized Response","text":"diagnosis design indicates randomized response yields unbiased estimate true rate IPV study sample offer better alternative direct questions involving sensitive controversial inquiries.","code":"diagnosis <- diagnose_design(randomized_response_design, sims = 25) ## Warning: We recommend you choose a number of simulations higher than 30."},{"path":"https://declaredesign.org/r/designlibrary/articles/randomized_response.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Randomized Response","text":"Blair, Graeme, Kosuke Imai, Yang-Yang Zhou. 2015. “Design Analysis Randomized Response Technique.” Journal American Statistical Association 110 (511): 1304–19. Greenberg, Bernard G, Abdel-Latif Abul-Ela, Walt R Simmons, Daniel G Horvitz. 1969. “Unrelated Question Randomized Response Model: Theoretical Framework.” Journal American Statistical Association 64 (326): 520–39. Warner, Stanley L. 1965. “Randomized Response: Survey Technique Eliminating Evasive Answer Bias.” Journal American Statistical Association 60 (309): 63–69.","code":""},{"path":"https://declaredesign.org/r/designlibrary/articles/regression_discontinuity.html","id":"design-declaration","dir":"Articles","previous_headings":"","what":"Design Declaration","title":"Regression Discontinuity","text":"Model: Regression discontinuity designs four components: running variable, cutoff, treatment variable, outcome. cutoff determines units treated depending value running variable. example, running variable \\(X\\) Democratic party’s margin victory time \\(t-1\\); treatment, \\(Z\\), whether Democratic party won election time \\(t-1\\). outcome, \\(Y\\), Democratic vote margin time \\(t\\). ’ll consider population 1,000 pairs elections. major assumption required regression discontinuity conditional expectation functions treatment control potential outcomes continuous cutoff.1 satisfy assumption, specify two smooth conditional expectation functions, one potential outcome. figure plots \\(Y\\) (Democratic vote margin time \\(t\\)) \\(X\\) (margin time \\(t-1\\)). ’ve also plotted true conditional expectation functions treated control potential outcomes. solid lines correspond observed data dashed lines correspond unobserved data.  Inquiry: estimand effect Democratic win election Democratic vote margin next election, Democratic vote margin first election zero. Formally, difference conditional expectation functions control treatment potential outcomes running variable exactly zero. black vertical line plot shows difference. Data strategy: collect data Democratic vote share time \\(t-1\\) time \\(t\\) 1,000 pairs elections. sampling random assignment. Answer strategy: approximate treated untreated conditional expectation functions left right cutoff using flexible regression specification estimated via OLS. particular, fit regression using fourth-order polynomial. Much literature regression discontinuity designs focuses tradeoffs among answer strategies, many analysts recommending higher-order polynomial regression specifications. use one highlight well answer strategy matches functional form model. discuss alternative estimators exercises.","code":"N <- 1000 tau <- 0.15 outcome_sd <- 0.1 cutoff <- 0.5 bandwidth <- 0.5 control_coefs <- c(0.5, 0.5) treatment_coefs <- c(-5, 1) poly_reg_order <- 4  po_function <- function(X, coefs, tau) {     as.vector(poly(X, length(coefs), raw = T) %*% coefs) +          tau } population <- declare_population(N = N, X = runif(N, 0, 1) -      cutoff, noise = rnorm(N, 0, outcome_sd), Z = 1 * (X >      0)) potential_outcomes <- declare_potential_outcomes(Y_Z_0 = po_function(X,      tau = 0, coefs = control_coefs) + noise, Y_Z_1 = po_function(X,      tau = tau, coefs = treatment_coefs) + noise) reveal_Y <- declare_reveal(Y) estimand <- declare_inquiry(LATE = po_function(X = 0, coefs = treatment_coefs,      tau = tau) - po_function(X = 0, coefs = control_coefs,      tau = 0)) sampling <- declare_sampling(handler = function(data) {     subset(data, (X > 0 - abs(bandwidth)) & X < 0 + abs(bandwidth)) }) estimator <- declare_estimator(formula = Y ~ poly(X, poly_reg_order) *      Z, model = lm_robust, term = \"Z\", inquiry = estimand) regression_discontinuity_design <- population + potential_outcomes +      estimand + reveal_Y + sampling + estimator"},{"path":"https://declaredesign.org/r/designlibrary/articles/regression_discontinuity.html","id":"takeaways","dir":"Articles","previous_headings":"","what":"Takeaways","title":"Regression Discontinuity","text":"now diagnose design: power design low: 1,000 units achieve even 10% statistical power. However, estimates uncertainty wide: coverage probability indicates confidence intervals indeed contain estimand 95% time . answer strategy highly uncertain second-order polynomial specification regression model gives weights data greatly increase variance estimator (Gelman Imbens, 2017). design biased polynomial approximations average effect exactly point threshold inaccurate small samples (Sekhon Titiunik, 2017), especially units farther away cutoff incorporated answer strategy. Finally, figure, can see poorly average effect threshold approximates average effect units. average treatment effect among treated (right threshold figure) negative, whereas threshold zero clarifies estimand regression discontinuity design, difference cutoff, relevant small – possibly empty – set units close cutoff.","code":"diagnosis <- diagnose_design(regression_discontinuity_design, sims = 25) ## Warning: We recommend you choose a number of simulations higher than 30. ## Warning in fn(data, formula = ~(Y ~ poly(X, poly_reg_order) * Z), model = ## ~lm_robust, : The argument 'model = ' is deprecated. Please use '.method = ' ## instead.  ## Warning in fn(data, formula = ~(Y ~ poly(X, poly_reg_order) * Z), model = ## ~lm_robust, : The argument 'model = ' is deprecated. Please use '.method = ' ## instead.  ## Warning in fn(data, formula = ~(Y ~ poly(X, poly_reg_order) * Z), model = ## ~lm_robust, : The argument 'model = ' is deprecated. Please use '.method = ' ## instead.  ## Warning in fn(data, formula = ~(Y ~ poly(X, poly_reg_order) * Z), model = ## ~lm_robust, : The argument 'model = ' is deprecated. Please use '.method = ' ## instead.  ## Warning in fn(data, formula = ~(Y ~ poly(X, poly_reg_order) * Z), model = ## ~lm_robust, : The argument 'model = ' is deprecated. Please use '.method = ' ## instead.  ## Warning in fn(data, formula = ~(Y ~ poly(X, poly_reg_order) * Z), model = ## ~lm_robust, : The argument 'model = ' is deprecated. Please use '.method = ' ## instead.  ## Warning in fn(data, formula = ~(Y ~ poly(X, poly_reg_order) * Z), model = ## ~lm_robust, : The argument 'model = ' is deprecated. Please use '.method = ' ## instead.  ## Warning in fn(data, formula = ~(Y ~ poly(X, poly_reg_order) * Z), model = ## ~lm_robust, : The argument 'model = ' is deprecated. Please use '.method = ' ## instead.  ## Warning in fn(data, formula = ~(Y ~ poly(X, poly_reg_order) * Z), model = ## ~lm_robust, : The argument 'model = ' is deprecated. Please use '.method = ' ## instead.  ## Warning in fn(data, formula = ~(Y ~ poly(X, poly_reg_order) * Z), model = ## ~lm_robust, : The argument 'model = ' is deprecated. Please use '.method = ' ## instead.  ## Warning in fn(data, formula = ~(Y ~ poly(X, poly_reg_order) * Z), model = ## ~lm_robust, : The argument 'model = ' is deprecated. Please use '.method = ' ## instead.  ## Warning in fn(data, formula = ~(Y ~ poly(X, poly_reg_order) * Z), model = ## ~lm_robust, : The argument 'model = ' is deprecated. Please use '.method = ' ## instead.  ## Warning in fn(data, formula = ~(Y ~ poly(X, poly_reg_order) * Z), model = ## ~lm_robust, : The argument 'model = ' is deprecated. Please use '.method = ' ## instead.  ## Warning in fn(data, formula = ~(Y ~ poly(X, poly_reg_order) * Z), model = ## ~lm_robust, : The argument 'model = ' is deprecated. Please use '.method = ' ## instead.  ## Warning in fn(data, formula = ~(Y ~ poly(X, poly_reg_order) * Z), model = ## ~lm_robust, : The argument 'model = ' is deprecated. Please use '.method = ' ## instead.  ## Warning in fn(data, formula = ~(Y ~ poly(X, poly_reg_order) * Z), model = ## ~lm_robust, : The argument 'model = ' is deprecated. Please use '.method = ' ## instead.  ## Warning in fn(data, formula = ~(Y ~ poly(X, poly_reg_order) * Z), model = ## ~lm_robust, : The argument 'model = ' is deprecated. Please use '.method = ' ## instead.  ## Warning in fn(data, formula = ~(Y ~ poly(X, poly_reg_order) * Z), model = ## ~lm_robust, : The argument 'model = ' is deprecated. Please use '.method = ' ## instead.  ## Warning in fn(data, formula = ~(Y ~ poly(X, poly_reg_order) * Z), model = ## ~lm_robust, : The argument 'model = ' is deprecated. Please use '.method = ' ## instead.  ## Warning in fn(data, formula = ~(Y ~ poly(X, poly_reg_order) * Z), model = ## ~lm_robust, : The argument 'model = ' is deprecated. Please use '.method = ' ## instead.  ## Warning in fn(data, formula = ~(Y ~ poly(X, poly_reg_order) * Z), model = ## ~lm_robust, : The argument 'model = ' is deprecated. Please use '.method = ' ## instead.  ## Warning in fn(data, formula = ~(Y ~ poly(X, poly_reg_order) * Z), model = ## ~lm_robust, : The argument 'model = ' is deprecated. Please use '.method = ' ## instead.  ## Warning in fn(data, formula = ~(Y ~ poly(X, poly_reg_order) * Z), model = ## ~lm_robust, : The argument 'model = ' is deprecated. Please use '.method = ' ## instead.  ## Warning in fn(data, formula = ~(Y ~ poly(X, poly_reg_order) * Z), model = ## ~lm_robust, : The argument 'model = ' is deprecated. Please use '.method = ' ## instead.  ## Warning in fn(data, formula = ~(Y ~ poly(X, poly_reg_order) * Z), model = ## ~lm_robust, : The argument 'model = ' is deprecated. Please use '.method = ' ## instead."},{"path":"https://declaredesign.org/r/designlibrary/articles/spillover.html","id":"design-declaration","dir":"Articles","previous_headings":"","what":"Design Declaration","title":"Spillover Design","text":"Model: model world specifies population units member group (n_groups size group_size ). key assumption spillover design member group treated units receive equal benefit (marginal gains possibly increasing decreasing numbers treated). Specifically, letting \\(G[]\\) denote group \\(\\) member, assume: \\[Y_i = \\left(\\frac{1}{n_{G[]}} \\sum_{j\\G[]}Z_j \\right)^\\gamma + \\epsilon_i\\] Inquiry: estimand interest average, across individuals, difference situation individual treated one individuals treated. Data strategy: randomly sample half units treatment half control, taking account group membership. . Answer strategy: subtract mean control group mean treatment group order estimate average treatment effect.","code":"N_groups <- 80 N_i_group <- 3 sd_i <- 0.2 gamma <- 2  population <- declare_population(G = add_level(N = N_groups,      n = N_i_group), i = add_level(N = n, zeros = 0, ones = 1)) dgp <- function(i, Z, G, n) (sum(Z[G == G[i]])/n[i])^gamma +      rnorm(1) * sd_i estimand <- declare_inquiry(Treat_1 = mean(sapply(1:length(G),      function(i) {         Z_i <- (1:length(G)) == i         dgp(i, Z_i, G, n) - dgp(i, zeros, G, n)     })), label = \"estimand\") assignment <- declare_assignment(Z = complete_ra(N)) reveal_Y <- declare_reveal(handler = fabricate, Y = sapply(1:N,      function(i) dgp(i, Z, G, n))) estimator <- declare_estimator(Y ~ Z, inquiry = estimand,      model = lm_robust, label = \"naive\") spillover_design <- population + estimand + assignment +      reveal_Y + estimator"},{"path":"https://declaredesign.org/r/designlibrary/articles/spillover.html","id":"takeaways","dir":"Articles","previous_headings":"","what":"Takeaways","title":"Spillover Design","text":"simplest point note estimates effects biased. renders excellent statistical power design somewhat meaningless. sign bias term perhaps surprising. idea positive spillovers produce underestimate effects familiar one. interesting feature structure spillovers design positive spillovers can produce overestimate treatment effects spillover effects increasing number neighbors treated. reason treated individual likely group multiple treated individuals untreated individual outcomes treated units enhanced within group spillovers","code":"diagnosis <- diagnose_design(spillover_design, sims = 25) ## Warning: We recommend you choose a number of simulations higher than 30. ## Warning in fn(data, ~(Y ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead.  ## Warning in fn(data, ~(Y ~ Z), model = ~lm_robust): The argument 'model = ' is ## deprecated. Please use '.method = ' instead."},{"path":"https://declaredesign.org/r/designlibrary/articles/two_arm.html","id":"design-declaration","dir":"Articles","previous_headings":"","what":"Design Declaration","title":"Two-Arm Experiment","text":"Model: model world specifies population \\(N\\) units control potential outcome, \\(Y_i(Z = 0)\\), distributed standard normally. unit’s individual treatment effect random draw distribution mean \\(\\tau\\) standard deviation \\(\\sigma\\), added control potential outcome: \\(Y_i(Z = 1) = Y_i(Z = 0) + t_i\\).3 Inquiry: want know average units’ differences treated untreated potential outcomes – average treatment effect: \\(E[Y_i(Z = 1) - Y_i(Z = 0)] = E[t_i] = \\tau\\). Data strategy: randomly sample \\(n\\) units population \\(N\\). randomly assign fixed number, \\(m\\), treatment, rest \\(n-m\\) units control. Answer strategy: subtract mean control group mean treatment group order estimate average treatment effect. \\(E[Y_i(Z = 1)] - E[Y_i(Z = 0)] = \\hat{\\tau}\\).","code":"N <- 100 assignment_prob <- 0.5 control_mean <- 0 control_sd <- 1 treatment_mean <- 1 treatment_sd <- 1 rho <- 1  population <- declare_population(N = N, u_0 = rnorm(N), u_1 = rnorm(n = N,      mean = rho * u_0, sd = sqrt(1 - rho^2))) potential_outcomes <- declare_potential_outcomes(Y ~ (1 -      Z) * (u_0 * control_sd + control_mean) + Z * (u_1 * treatment_sd +      treatment_mean)) estimand <- declare_inquiry(ATE = mean(Y_Z_1 - Y_Z_0)) assignment <- declare_assignment(Z = complete_ra(N, prob = assignment_prob)) reveal_Y <- declare_reveal() estimator <- declare_estimator(Y ~ Z, inquiry = estimand) two_arm_design <- population + potential_outcomes + estimand +      assignment + reveal_Y + estimator"},{"path":"https://declaredesign.org/r/designlibrary/articles/two_arm.html","id":"takeaways","dir":"Articles","previous_headings":"","what":"Takeaways","title":"Two-Arm Experiment","text":"diagnosis reveals, estimate ATE unbiased. shown without simulations using simple algebra. estimator, \\(\\hat{\\tau}\\), can written \\(E[Y_i(Z = 1)] - E[Y_i(Z = 0)] = E[Y_i(Z = 1) - Y_i(Z = 0)]\\) (via “linearity expectation”). Note implies \\(\\tau = \\hat{\\tau}\\): estimand equivalent estimator expectation. coverage (95%) -coverage reflects fact estimators standard error difference make worst-case assumption covariance potential outcomes. conservative approach leads standard error estimates overstate true variation sampling distribution point estimator.","code":"diagnosis <- diagnose_design(two_arm_design, sims = 25) ## Warning: We recommend you choose a number of simulations higher than 30."},{"path":"https://declaredesign.org/r/designlibrary/articles/two_arm.html","id":"exercises","dir":"Articles","previous_headings":"","what":"Exercises","title":"Two-Arm Experiment","text":"Using two_arm_designer(), declare set designs correlation potential outcomes goes negative, zero, positive. notice coverage? Explain reference mean standard error standard deviation estimates. Modify assignment step design individuals’ probability assignment function u_0, don’t change anything else. notice diagnosands design now? might change estimation strategy account updated assignment strategy?","code":""},{"path":"https://declaredesign.org/r/designlibrary/articles/two_arm_attrition.html","id":"design-declaration","dir":"Articles","previous_headings":"","what":"Design Declaration","title":"Two-Arm Experiment with Attrition","text":"Model: model world specifies population \\(N\\) units three variables affected treatment: response variable, \\(R_i\\); outcome interest, \\(Y_i\\), correlated response variable \\(\\rho\\); \\(Y^{obs}_i\\), measured version true \\(Y_i\\), observed \\(R_i = 1\\). Inquiry: want know average units’ differences treated untreated potential outcomes – average treatment effect outcome interest: \\(E[Y_i(Z = 1) - Y_i(Z = 0)]\\). also want know average treatment effect reporting, \\(E[R_i(Z = 1) - R_i(Z = 0)]\\), well effect treatment among report, \\(E[Y_i(Z = 1) - Y_i(Z = 0) \\mid R_i = 1]\\). Data strategy: randomly assign half units treatment. Answer strategy: \\(R_i\\) \\(Y^{obs}_i\\), subtract mean control group’s values mean treatment group order estimate average treatment effect.","code":"N <- 100 a_R <- 0 b_R <- 1 a_Y <- 0 b_Y <- 1 rho <- 0  population <- declare_population(N = N, u_R = rnorm(N), u_Y = rnorm(N,      mean = rho * u_R, sd = sqrt(1 - rho^2))) potential_outcomes_R <- declare_potential_outcomes(R ~ (a_R +      b_R * Z > u_R)) potential_outcomes_Y <- declare_potential_outcomes(Y ~ (a_Y +      b_Y * Z > u_Y)) estimand_1 <- declare_inquiry(mean(R_Z_1 - R_Z_0), label = \"ATE on R\") estimand_2 <- declare_inquiry(mean(Y_Z_1 - Y_Z_0), label = \"ATE on Y\") estimand_3 <- declare_inquiry(mean((Y_Z_1 - Y_Z_0)[R == 1]),      label = \"ATE on Y (Given R)\") assignment <- declare_assignment(Z = complete_ra(N, prob = 0.5)) reveal <- declare_reveal(outcome_variables = c(\"R\", \"Y\")) observed <- declare_step(Y_obs = ifelse(R, Y, NA), handler = fabricate) estimator_1 <- declare_estimator(R ~ Z, term = \"Z\", inquiry = estimand_1,      label = \"DIM on R\") estimator_2 <- declare_estimator(Y_obs ~ Z, term = \"Z\", inquiry = c(estimand_2,      estimand_3), label = \"DIM on Y_obs\") estimator_3 <- declare_estimator(Y ~ Z, term = \"Z\", inquiry = c(estimand_2,      estimand_3), label = \"DIM on Y\") two_arm_attrition_design <- population + potential_outcomes_R +      potential_outcomes_Y + assignment + reveal + observed +      estimand_1 + estimand_2 + estimand_3 + estimator_1 +      estimator_2 + estimator_3"},{"path":"https://declaredesign.org/r/designlibrary/articles/two_arm_attrition.html","id":"takeaways","dir":"Articles","previous_headings":"","what":"Takeaways","title":"Two-Arm Experiment with Attrition","text":"diagnosis illustrates effect reporting can always estimated high power bias However, strategy conditions \\(Y_i^{obs}\\) biased, even estimand conditional reporting. Even small amount correlation missingness outcomes can severely jeapordize inferences.","code":"designs <- expand_design(designer = two_arm_attrition_designer,                           rho = c(0,.2,.8)) diagnoses <- diagnose_designs(designs, sims = 25) ## Warning: We recommend you choose a number of simulations higher than 30.  ## Warning: We recommend you choose a number of simulations higher than 30.  ## Warning: We recommend you choose a number of simulations higher than 30. kable(reshape_diagnosis(diagnoses,select = c(\"Bias\",\"Power\")), digits = 2)"},{"path":"https://declaredesign.org/r/designlibrary/articles/two_arm_covariate.html","id":"design-declaration","dir":"Articles","previous_headings":"","what":"Design Declaration","title":"Two-Arm Experiment with a Covariate","text":"Model: model world specifies population \\(N\\) units three observable variables. binary treatment variable, \\(Z\\), potentially correlated covariate, \\(W\\). outcome variable, \\(Y\\), function treatment variable, may also correlated \\(W\\). refer correlations \\(W\\) \\(Z\\) \\(W\\) \\(Y\\) \\(\\rho_{WZ}\\) \\(\\rho_{WY}\\), respectively. Inquiry: want know average units’ differences treated untreated potential outcomes – average treatment effect outcome interest: \\(E[Y_i(Z = 1) - Y_i(Z = 0)]\\). Data strategy: variable \\(Z\\) assigned units researchers – rather, assigned unobservable process, \\(U_Z\\), may correlated \\(U_W\\). Answer strategy: consider three answer strategies. first control \\(W\\) estimating effect \\(Z\\) \\(Y\\). second controls average effect \\(W\\) \\(Y\\) estimating effect \\(Z\\) \\(Y\\). third uses estimator averages differences effect \\(Z\\) \\(Y\\) different levels \\(W\\).","code":"N <- 100 a_R <- 0 b_R <- 1 a_Y <- 0 b_Y <- 1 rho <- 0  population <- declare_population(N = N, u_R = rnorm(N), u_Y = rnorm(N,      mean = rho * u_R, sd = sqrt(1 - rho^2))) potential_outcomes_R <- declare_potential_outcomes(R ~ (a_R +      b_R * Z > u_R)) potential_outcomes_Y <- declare_potential_outcomes(Y ~ (a_Y +      b_Y * Z > u_Y)) estimand_1 <- declare_inquiry(mean(R_Z_1 - R_Z_0), label = \"ATE on R\") estimand_2 <- declare_inquiry(mean(Y_Z_1 - Y_Z_0), label = \"ATE on Y\") estimand_3 <- declare_inquiry(mean((Y_Z_1 - Y_Z_0)[R == 1]),      label = \"ATE on Y (Given R)\") assignment <- declare_assignment(Z = complete_ra(N, prob = 0.5)) reveal <- declare_reveal(outcome_variables = c(\"R\", \"Y\")) observed <- declare_step(Y_obs = ifelse(R, Y, NA), handler = fabricate) estimator_1 <- declare_estimator(R ~ Z, term = \"Z\", inquiry = estimand_1,      label = \"DIM on R\") estimator_2 <- declare_estimator(Y_obs ~ Z, term = \"Z\", inquiry = c(estimand_2,      estimand_3), label = \"DIM on Y_obs\") estimator_3 <- declare_estimator(Y ~ Z, term = \"Z\", inquiry = c(estimand_2,      estimand_3), label = \"DIM on Y\") two_arm_attrition_design <- population + potential_outcomes_R +      potential_outcomes_Y + assignment + reveal + observed +      estimand_1 + estimand_2 + estimand_3 + estimator_1 +      estimator_2 + estimator_3"},{"path":"https://declaredesign.org/r/designlibrary/articles/two_arm_covariate.html","id":"takeaways","dir":"Articles","previous_headings":"","what":"Takeaways","title":"Two-Arm Experiment with a Covariate","text":"\\(W\\) independent \\(Z\\) \\(Y\\), really doesn’t make much difference control \\(W\\) predictive \\(Y\\) correlated \\(Z\\), strictly better controlling \\(W\\). case, example, experiments prognostic covariates. \\(W\\) correlated \\(Z\\) \\(Y\\), can actually minimize root mean square error controlling. ’re better leaving \\(W\\) , controlling provides information \\(Y\\), introduces colinearity \\(W\\) \\(Z\\). final three rows, case confounding: \\(W\\) correlated sides regression equation. bias don’t control high; controlling helps lot.","code":"designs <- expand_design(   designer = two_arm_covariate_designer,   N = 30, rho_WY = c(0,.8), rho_WZ = c(0,.8), h = .5) diagnoses <- diagnose_designs(designs, sims = 25) ## Warning: We recommend you choose a number of simulations higher than 30. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning: We recommend you choose a number of simulations higher than 30. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning: We recommend you choose a number of simulations higher than 30. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning: We recommend you choose a number of simulations higher than 30. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z + W), model = ~lm_robust): The argument 'model = ' ## is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ Z), covariates = ~~W, model = ~lm_lin): The argument ## 'model = ' is deprecated. Please use '.method = ' instead."},{"path":"https://declaredesign.org/r/designlibrary/articles/two_by_two.html","id":"design-declaration","dir":"Articles","previous_headings":"","what":"Design Declaration","title":"Two-by-Two Factorial","text":"Model: specify \\(Z_1\\) \\(Z_2\\) effect outcome one causal agents becomes present. present combination causal factors produces increase 1/10th standard deviation outcome. Inquiry: can express effect \\(Z_A\\) \\(Z_B\\) present \\(\\tau_{Z_A \\mid Z_B} = E[(Y \\mid Z_A = 1, Z_B = 1) - (Y \\mid Z_A = 0, Z_B = 1)]\\), effect \\(Z_1\\) \\(Z_2\\) absent \\(\\tau_{Z_A \\mid \\neg Z_B} = E[(Y \\mid Z_A = 1, Z_B = 0) - (Y \\mid Z_A = 0, Z_B = 0)]\\). Thus, estimand \\(\\tau_{Z_A \\mid Z_B} - \\tau_{Z_A \\mid \\neg Z_B}\\): difference effect \\(Z_A\\) induced moving \\(Z_B\\) 0 1. design also features estimands involve weighted average \\(\\tau_{Z_A \\mid Z_B}\\) \\(\\tau_{Z_A \\mid \\neg Z_B}\\) (equivalent expressions effect \\(B\\)). ’re going weight average non-interaction estimands equivalent effect treatment one absent. Data strategy: randomly assign equal number subjects one four conditions, blocking assignment \\(B\\) assignment \\(\\). first causal factors absent, second third \\(\\) \\(B\\) present, respectively, fourth present. Answer strategy: estimate interaction effect using linear regression model focuses coefficient \\(Z_A \\times Z_B\\) term.","code":"N <- 100 prob_A <- 0.5 prob_B <- 0.5 weight_A <- 0 weight_B <- 0 mean_A0B0 <- 0 mean_A0B1 <- 0 mean_A1B0 <- 0 mean_A1B1 <- 0.1 sd_i <- 1 outcome_sds <- c(0, 0, 0, 0)  population <- declare_population(N, u = rnorm(N, sd = sd_i)) potential_outcomes <- declare_potential_outcomes(Y_A_0_B_0 = mean_A0B0 +      u + rnorm(N, sd = outcome_sds[1]), Y_A_0_B_1 = mean_A0B1 +      u + rnorm(N, sd = outcome_sds[2]), Y_A_1_B_0 = mean_A1B0 +      u + rnorm(N, sd = outcome_sds[3]), Y_A_1_B_1 = mean_A1B1 +      u + rnorm(N, sd = outcome_sds[4])) estimand_1 <- declare_inquiry(ate_A = weight_B * mean(Y_A_1_B_1 -      Y_A_0_B_1) + (1 - weight_B) * mean(Y_A_1_B_0 - Y_A_0_B_0)) estimand_2 <- declare_inquiry(ate_B = weight_A * mean(Y_A_1_B_1 -      Y_A_1_B_0) + (1 - weight_A) * mean(Y_A_0_B_1 - Y_A_0_B_0)) estimand_3 <- declare_inquiry(interaction = mean((Y_A_1_B_1 -      Y_A_1_B_0) - (Y_A_0_B_1 - Y_A_0_B_0))) assign_A <- declare_assignment(A = complete_ra(N, prob = prob_A)) assign_B <- declare_assignment(B = block_ra(prob = prob_B,      blocks = A)) reveal_Y <- declare_reveal(Y_variables = Y, assignment_variables = c(A,      B)) estimator_1 <- declare_estimator(Y ~ A + B, model = lm_robust,      term = c(\"A\", \"B\"), inquiry = c(\"ate_A\", \"ate_B\"), label = \"No_Interaction\") estimator_2 <- declare_estimator(Y ~ A + B + A:B, model = lm_robust,      term = \"A:B\", inquiry = \"interaction\", label = \"Interaction\") two_by_two_design <- population + potential_outcomes + estimand_1 +      estimand_2 + estimand_3 + assign_A + assign_B + reveal_Y +      estimator_1 + estimator_2"},{"path":"https://declaredesign.org/r/designlibrary/articles/two_by_two.html","id":"takeaways","dir":"Articles","previous_headings":"Design Declaration","what":"Takeaways","title":"Two-by-Two Factorial","text":"Wow, power really low interaction! ’s 4%. ’s estimator take account variation effects estimating difference. Note standard deviation interaction estimates twice estimates main effects. also see estimates main effects biased: set estimate effect treatment absent, half time treatment present, get boost estimated effect size due interaction.","code":"diagnosis <- diagnose_design(two_by_two_design, sims = 25) ## Warning: We recommend you choose a number of simulations higher than 30. ## Warning in fn(data, ~(Y ~ A + B), model = ~lm_robust, term = ~c(\"A\", \"B\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B + A:B), model = ~lm_robust, term = ~\"A:B\"): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B), model = ~lm_robust, term = ~c(\"A\", \"B\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B + A:B), model = ~lm_robust, term = ~\"A:B\"): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B), model = ~lm_robust, term = ~c(\"A\", \"B\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B + A:B), model = ~lm_robust, term = ~\"A:B\"): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B), model = ~lm_robust, term = ~c(\"A\", \"B\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B + A:B), model = ~lm_robust, term = ~\"A:B\"): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B), model = ~lm_robust, term = ~c(\"A\", \"B\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B + A:B), model = ~lm_robust, term = ~\"A:B\"): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B), model = ~lm_robust, term = ~c(\"A\", \"B\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B + A:B), model = ~lm_robust, term = ~\"A:B\"): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B), model = ~lm_robust, term = ~c(\"A\", \"B\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B + A:B), model = ~lm_robust, term = ~\"A:B\"): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B), model = ~lm_robust, term = ~c(\"A\", \"B\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B + A:B), model = ~lm_robust, term = ~\"A:B\"): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B), model = ~lm_robust, term = ~c(\"A\", \"B\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B + A:B), model = ~lm_robust, term = ~\"A:B\"): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B), model = ~lm_robust, term = ~c(\"A\", \"B\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B + A:B), model = ~lm_robust, term = ~\"A:B\"): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B), model = ~lm_robust, term = ~c(\"A\", \"B\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B + A:B), model = ~lm_robust, term = ~\"A:B\"): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B), model = ~lm_robust, term = ~c(\"A\", \"B\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B + A:B), model = ~lm_robust, term = ~\"A:B\"): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B), model = ~lm_robust, term = ~c(\"A\", \"B\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B + A:B), model = ~lm_robust, term = ~\"A:B\"): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B), model = ~lm_robust, term = ~c(\"A\", \"B\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B + A:B), model = ~lm_robust, term = ~\"A:B\"): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B), model = ~lm_robust, term = ~c(\"A\", \"B\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B + A:B), model = ~lm_robust, term = ~\"A:B\"): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B), model = ~lm_robust, term = ~c(\"A\", \"B\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B + A:B), model = ~lm_robust, term = ~\"A:B\"): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B), model = ~lm_robust, term = ~c(\"A\", \"B\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B + A:B), model = ~lm_robust, term = ~\"A:B\"): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B), model = ~lm_robust, term = ~c(\"A\", \"B\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B + A:B), model = ~lm_robust, term = ~\"A:B\"): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B), model = ~lm_robust, term = ~c(\"A\", \"B\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B + A:B), model = ~lm_robust, term = ~\"A:B\"): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B), model = ~lm_robust, term = ~c(\"A\", \"B\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B + A:B), model = ~lm_robust, term = ~\"A:B\"): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B), model = ~lm_robust, term = ~c(\"A\", \"B\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B + A:B), model = ~lm_robust, term = ~\"A:B\"): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B), model = ~lm_robust, term = ~c(\"A\", \"B\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B + A:B), model = ~lm_robust, term = ~\"A:B\"): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B), model = ~lm_robust, term = ~c(\"A\", \"B\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B + A:B), model = ~lm_robust, term = ~\"A:B\"): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B), model = ~lm_robust, term = ~c(\"A\", \"B\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B + A:B), model = ~lm_robust, term = ~\"A:B\"): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B), model = ~lm_robust, term = ~c(\"A\", \"B\")): The ## argument 'model = ' is deprecated. Please use '.method = ' instead. ## Warning in fn(data, ~(Y ~ A + B + A:B), model = ~lm_robust, term = ~\"A:B\"): The ## argument 'model = ' is deprecated. Please use '.method = ' instead."},{"path":"https://declaredesign.org/r/designlibrary/articles/two_by_two.html","id":"exercises","dir":"Articles","previous_headings":"Design Declaration","what":"Exercises","title":"Two-by-Two Factorial","text":"Alter answer strategy estimates main effects longer biased. Use expand_designs() two_by_two_designer() determine minimal interaction can detected 80% power, holding parameters constant. Alter template outcomes binary instead normally distibuted. expected standard error interaction term sample size 1000? Discuss implications diagnosis practice. Murray, David M. 1998. Design Analysis Group-Randomized Trials. Vol. 29. Monographs Epidemiology & B.","code":""},{"path":"https://declaredesign.org/r/designlibrary/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Graeme Blair. Author. Jasper Cooper. Author, maintainer. Alexander Coppock. Author. Macartan Humphreys. Author. Clara Bicalho. Author. Neal Fultz. Author. Lily Medina. Author.","code":""},{"path":"https://declaredesign.org/r/designlibrary/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Blair G, Cooper J, Coppock , Humphreys M, Bicalho C, Fultz N, Medina L (2023). DesignLibrary: Library Research Designs. R package version 0.1.10, https://github.com/DeclareDesign/DesignLibrary, https://declaredesign.org/r/designlibrary/.","code":"@Manual{,   title = {DesignLibrary: Library of Research Designs},   author = {Graeme Blair and Jasper Cooper and Alexander Coppock and Macartan Humphreys and Clara Bicalho and Neal Fultz and Lily Medina},   year = {2023},   note = {R package version 0.1.10, https://github.com/DeclareDesign/DesignLibrary},   url = {https://declaredesign.org/r/designlibrary/}, }"},{"path":"https://declaredesign.org/r/designlibrary/index.html","id":"designlibrary-a-library-of-common-research-designs","dir":"","previous_headings":"","what":"Library of Research Designs","title":"Library of Research Designs","text":"DesignLibrary provides simple interface build designs using package DeclareDesign. one line code users can specify parameters individual designs diagnose properties. designers can also used compare performance given design across range combinations parameters, effect size, sample size, assignment probabilities .","code":""},{"path":[]},{"path":"https://declaredesign.org/r/designlibrary/index.html","id":"installing-the-design-library","dir":"","previous_headings":"","what":"Installing the design library","title":"Library of Research Designs","text":"install latest stable release DesignLibrary, please ensure running version 3.4 later R run following code: like use latest development release DesignLibrary, please ensure running version 3.4 later R run following code:","code":"install.packages(\"DesignLibrary\") devtools::install_github(\"DeclareDesign/DesignLibrary\", keep_source = TRUE)"},{"path":"https://declaredesign.org/r/designlibrary/index.html","id":"contributing-designs-and-designers","dir":"","previous_headings":"","what":"Contributing designs and designers","title":"Library of Research Designs","text":"welcome contributions library! can submit static designs made DeclareDesign, live properly attributed entries library website can submit designer functions generate designs, may added CRAN version package project generously supported grant Laura John Arnold Foundation seed funding Evidence Governance Politics (EGAP).","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/DesignLibrary.html","id":null,"dir":"Reference","previous_headings":"","what":"DesignLibrary: A package for creating designs — DesignLibrary","title":"DesignLibrary: A package for creating designs — DesignLibrary","text":"Library Research Designs","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/assignment_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates string of assignment of value to argument — assignment_string","title":"Generates string of assignment of value to argument — assignment_string","text":"Generates string assignment value argument","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/assignment_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates string of assignment of value to argument — assignment_string","text":"","code":"assignment_string(arg_name, arg_values)"},{"path":"https://declaredesign.org/r/designlibrary/reference/assignment_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates string of assignment of value to argument — assignment_string","text":"arg_name string. Label assignment object. arg_values list. Values assigned argument. Can character, logical numeric length.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/binary_iv_designer.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a binary instrumental variables design — binary_iv_designer","title":"Create a binary instrumental variables design — binary_iv_designer","text":"Builds design one instrument, one binary explanatory variable, one outcome.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/binary_iv_designer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a binary instrumental variables design — binary_iv_designer","text":"","code":"binary_iv_designer(   N = 100,   type_probs = c(1/3, 1/3, 1/3, 0),   assignment_probs = c(0.5, 0.5, 0.5, 0.5),   a_Y = 1,   b_Y = 0,   d_Y = 0,   outcome_sd = 1,   a = c(1, 0, 0, 0) * a_Y,   b = rep(b_Y, 4),   d = rep(d_Y, 4),   args_to_fix = NULL )"},{"path":"https://declaredesign.org/r/designlibrary/reference/binary_iv_designer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a binary instrumental variables design — binary_iv_designer","text":"N integer. Sample size. type_probs vector four numbers [0,1]. Probability complier type (always-taker, never-taker, complier, defier). assignment_probs vector four numbers [0,1]. Probability assignment encouragement (Z) complier type (always-taker, never-taker, complier, defier). random assignment normally identical since complier status known researchers advance. a_Y real number. Constant Y equation. Assumed constant across types. Overridden specified. b_Y real number. Effect X Y equation. Assumed constant across types. Overridden b specified. d_Y real number. Effect Z Y. Assumed constant across types. Overridden d specified. outcome_sd real number. standard deviation outcome. vector four numbers. Constant Y equation complier type (always-taker, never-taker, complier, defier). b vector four numbers. Slope X Y equation complier type (always-taker, never-taker, complier, defier). d vector four numbers. Slope Z Y equation complier type (non zero implies violation exclusion restriction). args_to_fix character vector. Names arguments args_to_fix design.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/binary_iv_designer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a binary instrumental variables design — binary_iv_designer","text":"simple instrumental variables design binary instrument, treatment, outcome variables.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/binary_iv_designer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a binary instrumental variables design — binary_iv_designer","text":"researcher interested effect binary X outcome Y.  relationship confounded  units likely assigned X=1 higher Y outcomes. potential instrument Z examined, plausibly causes X. instrument can used assess effect X Y units whose value X depends Z Z negatively affect X cases, affects X positively , affects Y X. See vignette online details estimands.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/binary_iv_designer.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a binary instrumental variables design — binary_iv_designer","text":"DeclareDesign Team","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/binary_iv_designer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a binary instrumental variables design — binary_iv_designer","text":"","code":"# Generate a simple iv design: iv identifies late not ate  binary_iv_design_1 <- binary_iv_designer(N = 1000, b = c(.1, .2, .3, .4)) if (FALSE) { diagnose_design(binary_iv_design_1) }  # Generates a simple iv design with violation of monotonicity binary_iv_design_2 <- binary_iv_designer(type_probs = c(.1,.1,.6, .2), b_Y = .5) if (FALSE) { diagnose_design(binary_iv_design_2) }  # Generates a simple iv design with violation of exclusion restriction binary_iv_design_3 <- binary_iv_designer(d_Y = .5, b_Y = .5) if (FALSE) { diagnose_design(binary_iv_design_3) }  # Generates a simple iv design with violation of randomization binary_iv_design_4 <- binary_iv_designer(N = 1000, assignment_probs = c(.2, .3, .7, .5), b_Y = .5) if (FALSE) { diagnose_design(binary_iv_design_4) }  # Generates a simple iv design with violation of first stage binary_iv_design_5 <- binary_iv_designer(type_probs = c(.5,.5, 0, 0), b_Y = .5) if (FALSE) { diagnose_design(binary_iv_design_5) }"},{"path":"https://declaredesign.org/r/designlibrary/reference/block_cluster_two_arm_designer.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a two-arm design with blocks and clusters — block_cluster_two_arm_designer","title":"Create a two-arm design with blocks and clusters — block_cluster_two_arm_designer","text":"Builds two-arm design blocks clusters.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/block_cluster_two_arm_designer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a two-arm design with blocks and clusters — block_cluster_two_arm_designer","text":"","code":"block_cluster_two_arm_designer(   N = NULL,   N_blocks = 1,   N_clusters_in_block = ifelse(is.null(N), 100, round(N/N_blocks)),   N_i_in_cluster = ifelse(is.null(N), 1, round(N/mean(N_blocks * N_clusters_in_block))),   sd = 1,   sd_block = 0.5773 * sd,   sd_cluster = max(0, (sd^2 - sd_block^2)/2)^0.5,   sd_i_0 = max(0, sd^2 - sd_block^2 - sd_cluster^2)^0.5,   sd_i_1 = sd_i_0,   rho = 1,   assignment_probs = 0.5,   control_mean = 0,   ate = 0,   treatment_mean = control_mean + ate,   verbose = TRUE,   args_to_fix = NULL )"},{"path":"https://declaredesign.org/r/designlibrary/reference/block_cluster_two_arm_designer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a two-arm design with blocks and clusters — block_cluster_two_arm_designer","text":"N integer. Total number units. Usually specified N determined N_blocks, N_clusters_in_block, N_i_in_cluster. N_blocks,  N_clusters_in_block, N_i_in_cluster specified N overridden. specified N specified designer attempts guess sizes levels approximate N, preference design without blocks clusters. N_blocks integer. Number blocks. Defaults 1 blocks. N_clusters_in_block integer vector integers length N_blocks. Number clusters block. total N N_blocks N_i_in_cluster default values. N_i_in_cluster integer vector integers length sum(N_clusters_in_block). Individuals per cluster. Defaults 1 clusters. sd nonnegative number. Overall standard deviation (combining individual level, cluster level, block level shocks). Defaults 1. Overridden incompatible user-specified shocks. sd_block nonnegative number. Standard deviation block level shocks. sd_cluster nonnegative number. Standard deviation cluster level shock. sd_i_0 nonnegative number. Standard deviation individual level shock control. specified, possible given sd_block sd_cluster, sd_i_0 defaults make total variance = sd. sd_i_1 nonnegative number. Standard deviation individual level shock treatment. Defaults sd_i_0. rho number [-1,1]. Correlation individual shock potential outcomes treatment control. assignment_probs number vector numbers (0,1). Treatment assignment probability block (specified order N_clusters_in_block). control_mean number. Average outcome control. ate number. Average treatment effect. Alternative specifying treatment_mean. Note ate argument designer appear argument design code (design code uses control_mean treatment_mean ). treatment_mean number. Average outcome treatment. treatment_mean provided calculated control_mean + ate. ate  treatment_mean provided  treatment_mean used. verbose Logical. TRUE, prints intra-cluster correlation implied design parameters. args_to_fix character vector. Names arguments args_to_fix design.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/block_cluster_two_arm_designer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a two-arm design with blocks and clusters — block_cluster_two_arm_designer","text":"block cluster two-arm design.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/block_cluster_two_arm_designer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a two-arm design with blocks and clusters — block_cluster_two_arm_designer","text":"Units assigned treatment using complete block cluster random assignment. Treatment effects can specified either providing control_mean treatment_mean specifying ate. Estimation uses differences means accounting blocks clusters. usual case N provided user determined N_blocks, N_clusters_in_block, N_i_in_cluster (integers N product three numbers). Normal shocks can specified individual, cluster, block levels. individual level shocks specified cluster block  level variances sum less 1, individual level shocks set total variance outcomes equals 1. Key limitations: designer assumes covariance potential outcomes individual level . See vignette online.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/block_cluster_two_arm_designer.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a two-arm design with blocks and clusters — block_cluster_two_arm_designer","text":"DeclareDesign Team","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/block_cluster_two_arm_designer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a two-arm design with blocks and clusters — block_cluster_two_arm_designer","text":"","code":"# Generate a design using default arguments: block_cluster_two_arm_design <- block_cluster_two_arm_designer() #> [1] \"The implied ICC in (control) is 0.667\" #> [1] \"The implied ICC in (control) conditional on block is  0.5\" block_cluster_uneven <- block_cluster_two_arm_designer(        N_blocks = 3, N_clusters_in_block = 2:4, N_i_in_cluster = 1:9) #> [1] \"The implied ICC in (control) is 0.667\" #> [1] \"The implied ICC in (control) conditional on block is  0.5\" # A design in which number of clusters of cluster size is not specified # but N and block size are:         block_cluster_guess <- block_cluster_two_arm_designer(N = 24, N_blocks = 3) #> [1] \"The implied ICC in (control) is 0.667\" #> [1] \"The implied ICC in (control) conditional on block is  0.5\""},{"path":"https://declaredesign.org/r/designlibrary/reference/cluster_sampling_designer.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a design for cluster random sampling — cluster_sampling_designer","title":"Create a design for cluster random sampling — cluster_sampling_designer","text":"Builds cluster sampling design ordinal outcome variable population N_blocks strata, N_clusters_in_block clusters, contains N_i_in_cluster units. sampling strategy involves sampling n_clusters_in_block clusters stratum, sampling n_i_in_cluster units cluster. Outcomes within clusters intra-cluster correlation approximately equal ICC.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/cluster_sampling_designer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a design for cluster random sampling — cluster_sampling_designer","text":"","code":"cluster_sampling_designer(   N_blocks = 1,   N_clusters_in_block = 1000,   N_i_in_cluster = 50,   n_clusters_in_block = 100,   n_i_in_cluster = 10,   icc = 0.2,   args_to_fix = NULL )"},{"path":"https://declaredesign.org/r/designlibrary/reference/cluster_sampling_designer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a design for cluster random sampling — cluster_sampling_designer","text":"N_blocks integer. Number blocks (strata). Defaults 1 blocks. N_clusters_in_block integer vector integers length N_blocks. Number clusters block population. N_i_in_cluster integer vector integers length sum(N_clusters_in_block). Number units per cluster sampled. n_clusters_in_block integer. Number clusters sample block (stratum). n_i_in_cluster integer. Number units sample cluster. icc number [0,1]. Intra-cluster Correlation Coefficient (ICC). args_to_fix character vector. Names arguments args_to_fix design.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/cluster_sampling_designer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a design for cluster random sampling — cluster_sampling_designer","text":"stratified cluster sampling design.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/cluster_sampling_designer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a design for cluster random sampling — cluster_sampling_designer","text":"Key limitations: design assumes args_to_fix number clusters drawn stratum args_to_fix number individuals drawn cluster. See vignette online.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/cluster_sampling_designer.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a design for cluster random sampling — cluster_sampling_designer","text":"DeclareDesign Team","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/cluster_sampling_designer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a design for cluster random sampling — cluster_sampling_designer","text":"","code":"# To make a design using default arguments: cluster_sampling_design <- cluster_sampling_designer() # A design with varying block size and varying cluster size cluster_sampling_design <- cluster_sampling_designer(   N_blocks = 2, N_clusters_in_block = 6:7, N_i_in_cluster = 3:15,    n_clusters_in_block = 5,  n_i_in_cluster = 2)"},{"path":"https://declaredesign.org/r/designlibrary/reference/code_fixer.html","id":null,"dir":"Reference","previous_headings":"","what":"Substitute approach — code_fixer","title":"Substitute approach — code_fixer","text":"Substitute approach","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/code_fixer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substitute approach — code_fixer","text":"","code":"code_fixer(design_expr, list_fixed_str, eval_envir)"},{"path":"https://declaredesign.org/r/designlibrary/reference/code_fixer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substitute approach — code_fixer","text":"design_expr string. text expression wish substitute symbols set values. list_fixed_str string. string code generates named list arguments substituted evaluated design_expr. eval_envir evaluation environment. Defaults environment design arguments already evaluated.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/construct_design_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates clean code string that reproduces design — construct_design_code","title":"Generates clean code string that reproduces design — construct_design_code","text":"Generates clean code string reproduces design","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/construct_design_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates clean code string that reproduces design — construct_design_code","text":"","code":"construct_design_code(   designer,   args,   args_to_fix = NULL,   arguments_as_values = FALSE,   exclude_args = NULL )"},{"path":"https://declaredesign.org/r/designlibrary/reference/construct_design_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates clean code string that reproduces design — construct_design_code","text":"designer Designer function. args Named list arguments passed designer function. args_to_fix Vector strings. Designer arguments fix design code. arguments_as_values Logical. Whether replace argument names value. exclude_args Vector strings. Name arguments excluded argument definition top design code.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/factorial_designer.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a factorial design — factorial_designer","title":"Create a factorial design — factorial_designer","text":"2^k factorial designer k factors assigned independent probabilities. Results 2^k treatment combinations, independent, normally distributed shocks. Estimands average effects average interactions given conditions, averaged conditions. Estimation uses regression demeaned variables propensity weights.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/factorial_designer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a factorial design — factorial_designer","text":"","code":"factorial_designer(   N = 256,   k = 3,   outcome_means = rep(0, 2^k),   sd = 1,   outcome_sds = rep(sd, 2^k),   assignment_probs = rep(0.5, k),   outcome_name = \"Y\",   treatment_names = NULL,   args_to_fix = NULL )"},{"path":"https://declaredesign.org/r/designlibrary/reference/factorial_designer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a factorial design — factorial_designer","text":"N integer. Size sample. k integer. number factors design. outcome_means numeric vector length 2^k. Means 2^k treatment combinations. See `Details` correct order values. sd nonnegative number. Standard deviation outcomes outcomes identical standard deviations. outcome-specific standard deviations use outcomes_sds. outcome_sds non negative numeric vector length 2^k. Standard deviations treatment combinations. See `Details` correct order values. assignment_probs numeric vector length k. Independent probability assignment treatment. outcome_name character. Name outcome variable (defaults \"Y\"). Must provided without spacing inside function c() outcome_name = c(\"War\"). treatment_names character vector length k. Name treatment factors variable (defaults \"T1\", \"T2\", ..., \"Tk\"). Must provided without spacing. args_to_fix character vector. Names arguments args_to_fix design. default k, probs, outcome_name, treatment_names always args_to_fix.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/factorial_designer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a factorial design — factorial_designer","text":"factorial design.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/factorial_designer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a factorial design — factorial_designer","text":"factorial_designer creates factorial design 2^k treatment combinations resulting k factors, two conditions (c(0,1)). order scalar arguments outcome_means outcome_sds must follow one returned expand.grid(rep(list(c(0,1)), k)), columns treatment. Estimands defined combination treatment assignment linear combinations potential outcomes, typically weighted averages differences. Note weighting estimand reflect treatment assignment probabilities rather weights possible condition equally. example, design \\(k = 3\\) factors, treatment effect , (TE_A), averaged conditions defined B C, given : $$TE_A = 1/4*(Y_{111} - Y_{011}) + 1/4*(Y_{101} - Y_{001}) + 1/4*(Y_{110} - Y_{010}) + 1/4*(Y_{100} - Y_{000}).$$ \"average interaction B\" --- average effect (single unit) effect B across conditions defined C --- : $$TE_{AB} = 1/2*[(Y_{111} - Y_{011}) - (Y_{101} - Y_{001})] + 1/2*[(Y_{110} - Y_{010}) - (Y_{100} - Y_{000})].$$ triple interaction---, effect C effect B effect  : $$TE_{ABC} = [(Y_{111} - Y_{011}) - (Y_{101} - Y_{001})] - [(Y_{110} - Y_{010}) - (Y_{100} - Y_{000})],$$ \\(Y_{abc}\\) short potential outcome Y ,  B b,  C c. Estimates draw regression treatments demeaned weighted inverse probability condition .  Note  demeaned regression constant captures average outcome across conditions --- outcome units control condition. coefficient T1 captures average effect T1 across conditions---effect T1 conditions 0. .","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/factorial_designer.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a factorial design — factorial_designer","text":"DeclareDesign Team","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/factorial_designer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a factorial design — factorial_designer","text":"","code":"# A factorial design using default arguments factorial_design <- factorial_designer()  # A 2 x 2 x 2 factorial design with unequal probabilities of assignment to  # each treatment condition. In this case the estimator weights up by the  # conditional probabilities of assignment. factorial_design_2 <- factorial_designer(k = 3,                                           assignment_probs = c(1/2, 1/4, 1/8),                                           outcome_means = c(0,0,0,0,0,0,0,4)) if (FALSE) { diagnose_design(factorial_design_2) } # Mapping from outcomes to estimands  # The mapping between the potential outcomes schedule and the estimands of # interest is not always easy. To help with intuition consider a 2^3  # factorial design. You might like to think of a data generating process as # a collection of marginal effects and interaction effects mapping from # treatments to outcomes.  # For instance: Y = -.25 + .75*X1 - .25*X2 -.25*X3 + X1*X2*X3 # The vector of implied potential outcome means as a function of conditions   # could then be generated like this:  X <- expand.grid(rep(list(c(0,1)), 3)) outcome_means =  -.25 + X[,1]*3/4 - X[,2]/4 - X[,3]/4 + X[,1]*X[,2]*X[,3] outcomes <- cbind(X, outcome_means) colnames(outcomes) <- c(\"X1\", \"X2\", \"X3\", \"mean\") outcomes #>   X1 X2 X3  mean #> 1  0  0  0 -0.25 #> 2  1  0  0  0.50 #> 3  0  1  0 -0.50 #> 4  1  1  0  0.25 #> 5  0  0  1 -0.50 #> 6  1  0  1  0.25 #> 7  0  1  1 -0.75 #> 8  1  1  1  1.00  # Examination of the outcomes in this table reveals that there is an  # average outcome of 0 (over all conditions), an average effect of treatment # X1 of 1,  an average effects for X2 and X3 of 0,  the two way interactions  # are .5 (averaged over conditions of the third treatment) and the triple  # interaction is 1. # These are exactly the estimands calculated by the designer and returned in  # diagnosis. factorial_design_3 <- factorial_designer(k = 3,                                           outcome_means = outcome_means,                                          outcome_sds = rep(.01, 8)) #> Error in eval(args[[i]], envir = ee): object 'outcome_means' not found if (FALSE) { library(DeclareDesign) diagnose_design(factorial_design_3, sims = 10) }"},{"path":"https://declaredesign.org/r/designlibrary/reference/get_design_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the code from a design — get_design_code","title":"Get the code from a design — get_design_code","text":"Get code design","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/get_design_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the code from a design — get_design_code","text":"","code":"get_design_code(design)"},{"path":"https://declaredesign.org/r/designlibrary/reference/get_design_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the code from a design — get_design_code","text":"design design code attribute.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/match.call.defaults.html","id":null,"dir":"Reference","previous_headings":"","what":"Argument matching with defaults — match.call.defaults","title":"Argument matching with defaults — match.call.defaults","text":"version match.call also includes default arguments.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/match.call.defaults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Argument matching with defaults — match.call.defaults","text":"","code":"match.call.defaults(   definition = sys.function(sys.parent()),   call = sys.call(sys.parent()),   expand.dots = TRUE,   envir = parent.frame(2L) )"},{"path":"https://declaredesign.org/r/designlibrary/reference/match.call.defaults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Argument matching with defaults — match.call.defaults","text":"definition function, default function match.call called. See details. call unevaluated call function specified definition, generated call. expand.dots ogical. arguments matching ... call included left ... argument? envir environment, ... call retrieved, .","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/match.call.defaults.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Argument matching with defaults — match.call.defaults","text":"object class call.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/match.call.defaults.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Argument matching with defaults — match.call.defaults","text":"Neal Fultz","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/match.call.defaults.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Argument matching with defaults — match.call.defaults","text":"","code":"foo <- function(x=NULL,y=NULL,z=4, dots=TRUE, ...) {   match.call.defaults(expand.dots=dots) }"},{"path":"https://declaredesign.org/r/designlibrary/reference/mediation_analysis_designer.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a design for mediation analysis — mediation_analysis_designer","title":"Create a design for mediation analysis — mediation_analysis_designer","text":"mediation analysis design examines effect treatment (Z) mediator (M) effect mediator (M) outcome (Y) (given Z=0)  well direct effect treatment (Z) outcome (Y) (given M=0). Analysis implemented using interacted regression model.  Note model guaranteed unbiased despite randomization Z possible violations sequential ignorability.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/mediation_analysis_designer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a design for mediation analysis — mediation_analysis_designer","text":"","code":"mediation_analysis_designer(   N = 200,   a = 1,   b = 0.4,   c = 0,   d = 0.5,   rho = 0,   args_to_fix = NULL )"},{"path":"https://declaredesign.org/r/designlibrary/reference/mediation_analysis_designer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a design for mediation analysis — mediation_analysis_designer","text":"N integer. Size sample. number. Parameter governing effect treatment (Z) mediator (M). b number. Effect mediator (M) outcome (Y) Z = 0. c number. Interaction mediator (M) (Z) outcome (Y). d number. Direct effect treatment (Z) outcome (Y), M = 0. rho number [-1,1]. Correlation mediator (M) outcome (Y) error terms. Non zero correlation implies violation sequential ignorability. args_to_fix character vector. Names arguments args_to_fix design.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/mediation_analysis_designer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a design for mediation analysis — mediation_analysis_designer","text":"mediation analysis design.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/mediation_analysis_designer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a design for mediation analysis — mediation_analysis_designer","text":"See vignette online.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/mediation_analysis_designer.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a design for mediation analysis — mediation_analysis_designer","text":"DeclareDesign Team","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/mediation_analysis_designer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a design for mediation analysis — mediation_analysis_designer","text":"","code":"# Generate a mediation analysis design using default arguments: mediation_1 <- mediation_analysis_designer() draw_estimands(mediation_1) #>               inquiry estimand #> 1          FirstStage      0.3 #> 2          Indirect_0      0.4 #> 3          Indirect_1      0.4 #> 4 Controlled_Direct_0      0.5 #> 5 Controlled_Direct_1      0.5 #> 6    Natural_Direct_0      0.5 #> 7    Natural_Direct_1      0.5 if (FALSE) { diagnose_design(mediation_1, sims = 1000) }  # A design with a violation of sequential ignorability and heterogeneous effects: mediation_2 <- mediation_analysis_designer(a = 1, rho = .5, c = 1, d = .75) draw_estimands(mediation_2) #>               inquiry estimand #> 1          FirstStage    0.365 #> 2          Indirect_0    0.400 #> 3          Indirect_1    1.400 #> 4 Controlled_Direct_0    0.750 #> 5 Controlled_Direct_1    1.750 #> 6    Natural_Direct_0    1.235 #> 7    Natural_Direct_1    1.600 if (FALSE) { diagnose_design(mediation_2, sims = 1000) }"},{"path":"https://declaredesign.org/r/designlibrary/reference/multi_arm_designer.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a design with multiple experimental arms — multi_arm_designer","title":"Create a design with multiple experimental arms — multi_arm_designer","text":"Creates design m_arms experimental arms, assigned equal probability.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/multi_arm_designer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a design with multiple experimental arms — multi_arm_designer","text":"","code":"multi_arm_designer(   N = 30,   m_arms = 3,   outcome_means = rep(0, m_arms),   sd_i = 1,   outcome_sds = rep(0, m_arms),   conditions = 1:m_arms,   args_to_fix = NULL )"},{"path":"https://declaredesign.org/r/designlibrary/reference/multi_arm_designer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a design with multiple experimental arms — multi_arm_designer","text":"N integer. Sample size. m_arms integer. Number arms. outcome_means numeric vector length m_arms.  Average outcome arm. sd_i nonnegative scalar. Standard deviation individual-level shock (common across arms). outcome_sds nonnegative numeric vector length m_arms. Standard deviations condition-level shocks. conditions vector length m_arms. names arm. can given numeric character class (without blank spaces). args_to_fix character vector. Names arguments args_to_fix design. default, m_arms conditions always args_to_fix.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/multi_arm_designer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a design with multiple experimental arms — multi_arm_designer","text":"function returns design.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/multi_arm_designer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a design with multiple experimental arms — multi_arm_designer","text":"See vignette online.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/multi_arm_designer.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a design with multiple experimental arms — multi_arm_designer","text":"DeclareDesign Team","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/multi_arm_designer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a design with multiple experimental arms — multi_arm_designer","text":"","code":"# To make a design using default arguments: design <- multi_arm_designer()   # A design with different means and standard deviations in each arm design <- multi_arm_designer(outcome_means = c(0, 0.5, 2), outcome_sds =  c(1, 0.1, 0.5))  design <- multi_arm_designer(N = 80, m_arms = 4, outcome_means = 1:4,                              args_to_fix = c(\"outcome_means\", \"outcome_sds\"))"},{"path":"https://declaredesign.org/r/designlibrary/reference/pretest_posttest_designer.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a pretest-posttest design — pretest_posttest_designer","title":"Create a pretest-posttest design — pretest_posttest_designer","text":"Produces design outcome Y observed pre- post-treatment. design allows individual post-treatment outcomes correlated pre-treatment outcomes -random missingness observation post-treatment outcomes.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/pretest_posttest_designer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a pretest-posttest design — pretest_posttest_designer","text":"","code":"pretest_posttest_designer(   N = 100,   ate = 0.25,   sd_1 = 1,   sd_2 = 1,   rho = 0.5,   attrition_rate = 0.1,   args_to_fix = NULL )"},{"path":"https://declaredesign.org/r/designlibrary/reference/pretest_posttest_designer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a pretest-posttest design — pretest_posttest_designer","text":"N integer. Size sample. ate number. Average treatment effect. sd_1 Nonnegative number. Standard deviation period 1 shocks. sd_2 Nonnegative number. Standard deviation period 2 shocks. rho number [-1,1]. Correlation outcomes pre- post-test. attrition_rate number [0,1]. Proportion respondents pre-test data appear post-test data. args_to_fix character vector. Names arguments args_to_fix design.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/pretest_posttest_designer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a pretest-posttest design — pretest_posttest_designer","text":"pretest-posttest design.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/pretest_posttest_designer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a pretest-posttest design — pretest_posttest_designer","text":"See vignette online.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/pretest_posttest_designer.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a pretest-posttest design — pretest_posttest_designer","text":"DeclareDesign Team","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/pretest_posttest_designer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a pretest-posttest design — pretest_posttest_designer","text":"","code":"# Generate a pre-test post-test design using default arguments: pretest_posttest_design <- pretest_posttest_designer()"},{"path":"https://declaredesign.org/r/designlibrary/reference/process_tracing_designer.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a process-tracing design — process_tracing_designer","title":"Create a process-tracing design — process_tracing_designer","text":"Builds design two pieces evidence sought used update whether X caused Y using Bayes' rule.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/process_tracing_designer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a process-tracing design — process_tracing_designer","text":"","code":"process_tracing_designer(   N = 100,   prob_X = 0.5,   process_proportions = c(0.25, 0.25, 0.25, 0.25),   prior_H = 0.5,   p_E1_H = 0.8,   p_E1_not_H = 0.2,   p_E2_H = 0.3,   p_E2_not_H = 0,   cor_E1E2_H = 0,   cor_E1E2_not_H = 0,   label_E1 = \"Straw in the Wind\",   label_E2 = \"Smoking Gun\",   args_to_fix = NULL )"},{"path":"https://declaredesign.org/r/designlibrary/reference/process_tracing_designer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a process-tracing design — process_tracing_designer","text":"N integer. Size population cases single case selected. prob_X number [0,1]. Probability X = 1 given case (equal throughout population cases). process_proportions vector numbers [0,1] sums 1. Simplex denoting proportion cases population , respectively: 1) X causes Y; 2) Y occurs regardless X; 3) X causes absence Y; 4) Y absent regardless X. prior_H number [0,1]. Prior probability X causes Y given case X Y present. p_E1_H number [0,1]. Probability observing first piece evidence given hypothesis X caused Y true. p_E1_not_H number [0,1]. Probability observing first piece evidence given hypothesis X caused Y true. p_E2_H number [0,1]. Probability observing second piece evidence given hypothesis X caused Y true. p_E2_not_H number [0,1]. Probability observing second piece evidence given hypothesis X caused Y true. cor_E1E2_H number [-1,1]. Correlation first second pieces evidence given hypothesis X caused Y true. cor_E1E2_not_H number [-1,1]. Correlation first second pieces evidence given hypothesis X caused Y true. label_E1 string. Label first piece evidence (e.g., \"Straw Wind\"). label_E2 string. Label second piece evidence (e.g., \"Smoking Gun\"). args_to_fix character vector. Names arguments args_to_fix design.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/process_tracing_designer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a process-tracing design — process_tracing_designer","text":"process-tracing design.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/process_tracing_designer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a process-tracing design — process_tracing_designer","text":"model posits population N cases, exhibit presence outcome, Y. probability prob_X, case also exhibits presence absence potential cause, X. outcome Y can realized four distinct causal relations, distributed population cases according process_proportions. First, presence X might cause Y. Second, absence X might cause Y. Third, Y might present irrespective X. Fourth, Y might absent irrespective X. inquiry \"cause effects\" question. wish know whether specific case one presence (absence) X caused presence (absence) Y. data strategy consists selecting one case random X Y present. part data strategy seek two pieces evidence favor hypothesized causal relationship, H, X causes Y. first (second) piece evidence observed probability p_E1_H (p_E2_H) H true, probability p_E1_not_H (p_E2_not_H) H false. Conditional H true (false), correlation two pieces evidence given cor_E1E2_H (cor_E1E2_not_H). researcher uses Bayes’ rule update probability X caused Y given evidence. words, form posterior inference, Pr(H|E). specify four answer strategies forming inference. first simply ignores evidence equivalent stating prior belief without causal process tracing. second conditions inferences first piece evidence, third second piece evidence. fourth strategy conditions posterior inferences pieces evidence simultaneously. specify diagnosands design bias, RMSE, mean(estimand), mean(estimate) sd(estimate).","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/process_tracing_designer.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a process-tracing design — process_tracing_designer","text":"DeclareDesign Team","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/process_tracing_designer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a process-tracing design — process_tracing_designer","text":"","code":"# Generate a process-tracing design using default arguments: pt_1 <- process_tracing_designer() draw_estimands(pt_1) #>         inquiry estimand #> 1 did_X_cause_Y     TRUE draw_estimates(pt_1) #>                           estimator posterior_H result       inquiry #> 1                  No tests (Prior)   0.5000000   TRUE did_X_cause_Y #> 2                 Straw in the Wind   0.2000000  FALSE did_X_cause_Y #> 3                       Smoking Gun   0.4117647  FALSE did_X_cause_Y #> 4 Straw in the Wind and Smoking Gun   0.1489362     00 did_X_cause_Y draw_data(pt_1) #>    ID causal_process    X    Y S test_results    E1    E2 #> 1 013   Y_regardless TRUE TRUE 1           00 FALSE FALSE if (FALSE) { diagnose_design(pt_1, sims = 1000) }  # A design in which the smoking gun and straw-in-the-wind are correlated pt_2 <- process_tracing_designer(cor_E1E2_H = .32) if (FALSE) { diagnose_design(pt_2, sims = 1000) }  # A design with two doubly-decisive tests pointing in opposite directions pt_3 <- process_tracing_designer(p_E1_H = .80,p_E1_not_H = .05,                                  label_E1 = \"Doubly-Decisive: H\",                                  p_E2_H = .05,p_E2_not_H = .80,                                  label_E2 = \"Doubly-Decisive: Not H\") draw_estimates(pt_3)                                 #>                                       estimator posterior_H result #> 1                              No tests (Prior)   0.5000000   TRUE #> 2                            Doubly-Decisive: H   0.9411765   TRUE #> 3                        Doubly-Decisive: Not H   0.8260870  FALSE #> 4 Doubly-Decisive: H and Doubly-Decisive: Not H   0.9870130     10 #>         inquiry #> 1 did_X_cause_Y #> 2 did_X_cause_Y #> 3 did_X_cause_Y #> 4 did_X_cause_Y if (FALSE) { diagnose_design(pt_3, sims = 1000) }"},{"path":"https://declaredesign.org/r/designlibrary/reference/randomized_response_designer.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a randomized response design — randomized_response_designer","title":"Create a randomized response design — randomized_response_designer","text":"Produces (forced) randomized response design measures share individuals given trait prevalence_trait population size N. Probability forced response (\"Yes\") given prob_forced_yes, rate individuals trait lie given withholding_rate.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/randomized_response_designer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a randomized response design — randomized_response_designer","text":"","code":"randomized_response_designer(   N = 1000,   prob_forced_yes = 0.6,   prevalence_rate = 0.1,   withholding_rate = 0.5,   args_to_fix = NULL )"},{"path":"https://declaredesign.org/r/designlibrary/reference/randomized_response_designer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a randomized response design — randomized_response_designer","text":"N integer. Size sample. prob_forced_yes number [0,1]. Probability forced yes. prevalence_rate number [0,1]. Probability individual sensitive trait. withholding_rate number [0,1]. Probability individual sensitive trait hides . args_to_fix character vector. Names arguments args_to_fix design.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/randomized_response_designer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a randomized response design — randomized_response_designer","text":"randomized response design.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/randomized_response_designer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a randomized response design — randomized_response_designer","text":"randomized_response_designer employs specific variation randomized response designs respondents required report args_to_fix answer sensitive question given probability (see Blair, Imai, Zhou (2015) alternative applications estimation strategies). See vignette online.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/randomized_response_designer.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a randomized response design — randomized_response_designer","text":"DeclareDesign Team","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/randomized_response_designer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a randomized response design — randomized_response_designer","text":"","code":"# Generate a randomized response design using default arguments: randomized_response_design <- randomized_response_designer()"},{"path":"https://declaredesign.org/r/designlibrary/reference/regression_discontinuity_designer.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a regression discontinuity design — regression_discontinuity_designer","title":"Create a regression discontinuity design — regression_discontinuity_designer","text":"Builds design sample population size N. average treatment effect local cutpoint equal tau. allows specification order polynomial regression (poly_reg_order), cutoff value running variable (cutoff), size bandwidth around cutoff (bandwidth). providing vector numbers control_coefs treatment_coefs, users can also specify polynomial regression coefficients generate expected control treatment potential outcomes given running variable.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/regression_discontinuity_designer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a regression discontinuity design — regression_discontinuity_designer","text":"","code":"regression_discontinuity_designer(   N = 1000,   tau = 0.15,   outcome_sd = 0.1,   cutoff = 0.5,   bandwidth = 0.5,   control_coefs = c(0.5, 0.5),   treatment_coefs = c(-5, 1),   poly_reg_order = 4,   args_to_fix = NULL )"},{"path":"https://declaredesign.org/r/designlibrary/reference/regression_discontinuity_designer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a regression discontinuity design — regression_discontinuity_designer","text":"N integer. Size population sample . tau number. Difference potential outcomes functions threshold. outcome_sd positive number. standard deviation outcome. cutoff number (0,1). Threshold running variable beyond units treated. bandwidth number. value bandwidth sides threshold include units. control_coefs vector numbers. Coefficients polynomial regression function generates control potential outcomes. Order polynomial equal length. treatment_coefs vector numbers. Coefficients polynomial regression function generates treatment potential outcomes. Order polynomial equal length. poly_reg_order Integer greater equal 1. Order polynomial regression used estimate jump cutoff. args_to_fix character vector. Names arguments args_to_fix design.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/regression_discontinuity_designer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a regression discontinuity design — regression_discontinuity_designer","text":"regression discontinuity design.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/regression_discontinuity_designer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a regression discontinuity design — regression_discontinuity_designer","text":"See vignette online.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/regression_discontinuity_designer.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a regression discontinuity design — regression_discontinuity_designer","text":"DeclareDesign Team","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/regression_discontinuity_designer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a regression discontinuity design — regression_discontinuity_designer","text":"","code":"# Generate a regression discontinuity design using default arguments: regression_discontinuity_design <- regression_discontinuity_designer()"},{"path":"https://declaredesign.org/r/designlibrary/reference/return_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates character string for non-fixed arguments in a designer using substitution approach. — return_args","title":"Generates character string for non-fixed arguments in a designer using substitution approach. — return_args","text":"Generates character string non-fixed arguments designer using substitution approach.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/return_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates character string for non-fixed arguments in a designer using substitution approach. — return_args","text":"","code":"return_args(args, fixes)"},{"path":"https://declaredesign.org/r/designlibrary/reference/return_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates character string for non-fixed arguments in a designer using substitution approach. — return_args","text":"args Function arguments. fixes Function arguments fixed (.e., already evaluated body function)","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/spillover_designer.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a design with spillovers — spillover_designer","title":"Create a design with spillovers — spillover_designer","text":"Builds design N_groups groups containing N_i_group individuals.  Potential outcomes exhibit spillovers: individual group receives treatment,  effect spread equally among members group.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/spillover_designer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a design with spillovers — spillover_designer","text":"","code":"spillover_designer(   N_groups = 80,   N_i_group = 3,   sd_i = 0.2,   gamma = 2,   args_to_fix = NULL )"},{"path":"https://declaredesign.org/r/designlibrary/reference/spillover_designer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a design with spillovers — spillover_designer","text":"N_groups integer. Number groups. N_i_group Number units group. Can scalar vector length N_groups. sd_i nonnegative number. Standard deviation individual-level shock. gamma number. Parameter controls whether spillovers within groups substitute complement . See `Details`. args_to_fix character vector. Names arguments args_to_fix design.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/spillover_designer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a design with spillovers — spillover_designer","text":"simple spillover design.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/spillover_designer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a design with spillovers — spillover_designer","text":"Parameter gamma controls interactions spillover effects.gamma=1 every $1 given member group, member receives $1*N_i_group matter many others already treated. gamma>1 (<1) every $1 given member group, member receives amount depends negatively (positively) number already treated. default estimand average difference across subjects one treated subject treated.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/spillover_designer.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a design with spillovers — spillover_designer","text":"DeclareDesign Team","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/spillover_designer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a design with spillovers — spillover_designer","text":"","code":"# Generate a simple spillover design using default arguments: spillover_design <- spillover_designer()"},{"path":"https://declaredesign.org/r/designlibrary/reference/str_within.html","id":null,"dir":"Reference","previous_headings":"","what":"Takes substring between matched strings. Avoids dependency on stringr package. — str_within","title":"Takes substring between matched strings. Avoids dependency on stringr package. — str_within","text":"Takes substring matched strings. Avoids dependency stringr package.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/str_within.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Takes substring between matched strings. Avoids dependency on stringr package. — str_within","text":"","code":"str_within(string, pattern = \"^(structure\\\\()|(, \\\\.Names)\")"},{"path":"https://declaredesign.org/r/designlibrary/reference/str_within.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Takes substring between matched strings. Avoids dependency on stringr package. — str_within","text":"string string. String substring extracted. pattern regular expression matches beggining end substring","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/sub_expr_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Substitute text from expressions in design code — sub_expr_text","title":"Substitute text from expressions in design code — sub_expr_text","text":"Substitute text expressions design code","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/sub_expr_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substitute text from expressions in design code — sub_expr_text","text":"","code":"sub_expr_text(code, ...)"},{"path":"https://declaredesign.org/r/designlibrary/reference/sub_expr_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substitute text from expressions in design code — sub_expr_text","text":"code List contaitining design code. ... List expressions substituted text.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/sub_expr_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Substitute text from expressions in design code — sub_expr_text","text":"Code expression text.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/two_arm_attrition_designer.html","id":null,"dir":"Reference","previous_headings":"","what":"Create design with risk of attrition or post treatment conditioning — two_arm_attrition_designer","title":"Create design with risk of attrition or post treatment conditioning — two_arm_attrition_designer","text":"Creates two-arm design application estimand interest conditional post-treatment outcome  (effect Y given R) data conditionally observed (Y given R). See `Details` information data generating process.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/two_arm_attrition_designer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create design with risk of attrition or post treatment conditioning — two_arm_attrition_designer","text":"","code":"two_arm_attrition_designer(   N = 100,   a_R = 0,   b_R = 1,   a_Y = 0,   b_Y = 1,   rho = 0,   args_to_fix = NULL )"},{"path":"https://declaredesign.org/r/designlibrary/reference/two_arm_attrition_designer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create design with risk of attrition or post treatment conditioning — two_arm_attrition_designer","text":"N integer. Size sample. a_R number. Constant equation relating treatment responses. b_R number. Slope coefficient equation relating treatment responses. a_Y number. Constant equation relating treatment outcome. b_Y number. Slope coefficient equation relating treatment outcome. rho number [0,1]. Correlation shocks equations R Y. args_to_fix character vector. Names arguments args_to_fix design.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/two_arm_attrition_designer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create design with risk of attrition or post treatment conditioning — two_arm_attrition_designer","text":"post-treatment design.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/two_arm_attrition_designer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create design with risk of attrition or post treatment conditioning — two_arm_attrition_designer","text":"data generating process form: R ~ (a_R + b_R*Z > u_R) Y ~ (a_Y + b_Y*Z > u_Y) u_R u_Y joint normally distributed correlation rho.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/two_arm_attrition_designer.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create design with risk of attrition or post treatment conditioning — two_arm_attrition_designer","text":"DeclareDesign Team","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/two_arm_attrition_designer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create design with risk of attrition or post treatment conditioning — two_arm_attrition_designer","text":"","code":"# To make a design using default argument (missing completely at random): two_arm_attrition_design <- two_arm_attrition_designer() if (FALSE) { diagnose_design(two_arm_attrition_design) } # Attrition can produce bias even for unconditional ATE even when not # associated with treatment if (FALSE) { diagnose_design(two_arm_attrition_designer(b_R = 0, rho = .3)) } # Here the linear estimate using R=1 data is unbiased for # \"ATE on Y (Given R)\" with b_R = 0 but not when  b_R = 1    if (FALSE) { diagnose_design(redesign(two_arm_attrition_design, b_R = 0:1, rho = .2)) }"},{"path":"https://declaredesign.org/r/designlibrary/reference/two_arm_covariate_designer.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a simple two arm design with a possibly prognostic covariate — two_arm_covariate_designer","title":"Create a simple two arm design with a possibly prognostic covariate — two_arm_covariate_designer","text":"Builds design one treatment one control arm. Treatment effects can specified either providing control_mean treatment_mean specifying control_mean ate. Non random assignment specified possible correlation, rho_WZ,  W latent variable determines probability Z.   Nonignorability specified possible correlation, rho_WY,  W outcome Y.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/two_arm_covariate_designer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a simple two arm design with a possibly prognostic covariate — two_arm_covariate_designer","text":"","code":"two_arm_covariate_designer(   N = 100,   prob = 0.5,   control_mean = 0,   sd = 1,   ate = 1,   h = 0,   treatment_mean = control_mean + ate,   rho_WY = 0,   rho_WZ = 0,   args_to_fix = NULL )"},{"path":"https://declaredesign.org/r/designlibrary/reference/two_arm_covariate_designer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a simple two arm design with a possibly prognostic covariate — two_arm_covariate_designer","text":"N integer. Sample size. prob number [0,1]. Probability assignment treatment. control_mean number. Average outcome control. sd positive number. Standard deviation shock Y. ate number. Average treatment effect. h number. Controls heterogeneous treatment effects W. Defaults 0. treatment_mean number. Average outcome treatment. Overrides ate specified. rho_WY number [-1,1]. Correlation W Y. rho_WZ number [-1,1]. Correlation W Z. args_to_fix character vector. Names arguments args_to_fix design.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/two_arm_covariate_designer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a simple two arm design with a possibly prognostic covariate — two_arm_covariate_designer","text":"simple two-arm design covariate W.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/two_arm_covariate_designer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a simple two arm design with a possibly prognostic covariate — two_arm_covariate_designer","text":"Units assigned treatment using complete random assignment. Potential outcomes normally distributed according mean sd arguments. See vignette online.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/two_arm_covariate_designer.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a simple two arm design with a possibly prognostic covariate — two_arm_covariate_designer","text":"DeclareDesign Team","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/two_arm_covariate_designer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a simple two arm design with a possibly prognostic covariate — two_arm_covariate_designer","text":"","code":"#Generate a simple two-arm design using default arguments two_arm_covariate_design <- two_arm_covariate_designer() # Design with no confounding but a prognostic covariate  prognostic <- two_arm_covariate_designer(N = 40, ate = .2, rho_WY = .9, h = .5) if (FALSE) { diagnose_design(prognostic) } # Design with confounding  confounding <- two_arm_covariate_designer(N = 40, ate = 0, rho_WZ = .9, rho_WY = .9, h = .5) if (FALSE) { diagnose_design(confounding, sims = 2000) }  # Curse of power: A biased design may be more likely to mislead the larger it is  curses <- expand_design(two_arm_covariate_designer,                          N = c(50, 500, 5000), ate = 0, rho_WZ = .2, rho_WY = .2) if (FALSE) { diagnoses <- diagnose_design(curses) subset(diagnoses$diagnosands_df, estimator == \"No controls\")[,c(\"N\", \"power\")] }"},{"path":"https://declaredesign.org/r/designlibrary/reference/two_arm_designer.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a one-level two-arm design — two_arm_designer","title":"Create a one-level two-arm design — two_arm_designer","text":"Builds design one treatment one control arm. Treatment effects can specified either providing control_mean treatment_mean specifying control_mean ate.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/two_arm_designer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a one-level two-arm design — two_arm_designer","text":"","code":"two_arm_designer(   N = 100,   assignment_prob = 0.5,   control_mean = 0,   control_sd = 1,   ate = 1,   treatment_mean = control_mean + ate,   treatment_sd = control_sd,   rho = 1,   args_to_fix = NULL )"},{"path":"https://declaredesign.org/r/designlibrary/reference/two_arm_designer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a one-level two-arm design — two_arm_designer","text":"N integer. Sample size. assignment_prob number [0,1]. Probability assignment treatment. control_mean number. Average outcome control. control_sd positive number. Standard deviation control. ate number. Average treatment effect. treatment_mean number. Average outcome treatment. Overrides ate specified. treatment_sd nonnegative number. Standard deviation treatment. default equals control_sd. rho number [-1,1]. Correlation treatment control outcomes. args_to_fix character vector. Names arguments args_to_fix design.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/two_arm_designer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a one-level two-arm design — two_arm_designer","text":"simple two-arm design.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/two_arm_designer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a one-level two-arm design — two_arm_designer","text":"Units assigned treatment using complete random assignment. Potential outcomes normally distributed according mean sd arguments.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/two_arm_designer.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a one-level two-arm design — two_arm_designer","text":"DeclareDesign Team","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/two_arm_designer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a one-level two-arm design — two_arm_designer","text":"","code":"# Generate a simple two-arm design using default arguments two_arm_design <- two_arm_designer()"},{"path":"https://declaredesign.org/r/designlibrary/reference/two_by_two_designer.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a two-by-two factorial design — two_by_two_designer","title":"Create a two-by-two factorial design — two_by_two_designer","text":"Builds two--two factorial design assignments factor independent .","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/two_by_two_designer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a two-by-two factorial design — two_by_two_designer","text":"","code":"two_by_two_designer(   N = 100,   prob_A = 0.5,   prob_B = 0.5,   weight_A = 0.5,   weight_B = 0.5,   outcome_means = rep(0, 4),   mean_A0B0 = outcome_means[1],   mean_A0B1 = outcome_means[2],   mean_A1B0 = outcome_means[3],   mean_A1B1 = outcome_means[4],   sd_i = 1,   outcome_sds = rep(0, 4),   args_to_fix = NULL )"},{"path":"https://declaredesign.org/r/designlibrary/reference/two_by_two_designer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a two-by-two factorial design — two_by_two_designer","text":"N integer. Size sample. prob_A number [0,1]. Probability assignment treatment . prob_B number [0,1]. Probability assignment treatment B. weight_A number. Weight placed =1 condition definition \"average effect B\" estimand. weight_B number. Weight placed B=1 condition definition \"average effect \" estimand. outcome_means vector length 4. Average outcome ,B condition, order AB = 00, 01, 10, 11. Values overridden mean_A0B0, mean_A0B1, mean_A1B0, mean_A1B1, provided. mean_A0B0 number. Mean outcome =0, B=0 condition. mean_A0B1 number. Mean outcome =0, B=1 condition. mean_A1B0 number. Mean outcome =1, B=0 condition. mean_A1B1 number. Mean outcome =1, B=1 condition. sd_i nonnegative scalar. Standard deviation individual-level shock (common across arms). outcome_sds nonnegative vector length 4. Standard deviation (additional) unit level shock condition, order AB = 00, 01, 10, 11. args_to_fix character vector. Names arguments args_to_fix design.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/two_by_two_designer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a two-by-two factorial design — two_by_two_designer","text":"two--two factorial design.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/two_by_two_designer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a two-by-two factorial design — two_by_two_designer","text":"Three types estimand declared. First, weighted averages average treatment effects treatment, given two conditions treatments. Second third, difference treatment effects treatment, given conditions treatment. Units assigned treatment using complete random assignment. Potential outcomes follow normal distribution. Treatment assigned first Treatment B within blocks defined treatment . Thus, 6 units  3 guaranteed receive treatment number receiving treatment B stochastic. See multi_arm_designer factorial design non independent assignments.","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/two_by_two_designer.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a two-by-two factorial design — two_by_two_designer","text":"DeclareDesign Team","code":""},{"path":"https://declaredesign.org/r/designlibrary/reference/two_by_two_designer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a two-by-two factorial design — two_by_two_designer","text":"","code":"design <- two_by_two_designer(outcome_means = c(0,0,0,1))  # A design biased for the specified estimands: design <- two_by_two_designer(outcome_means = c(0,0,0,1), prob_A = .8, prob_B = .2) if (FALSE) { diagnose_design(design) }  # A design with estimands that \"match\" the assignment: design <- two_by_two_designer(outcome_means = c(0,0,0,1),                                      prob_A = .8, prob_B = .2,                                      weight_A = .8, weight_B = .2) if (FALSE) { diagnose_design(design) }  # Compare power with and without interactions, given same average effects in each arm designs <- redesign(two_by_two_designer(),                      outcome_means = list(c(0,0,0,1), c(0,.5,.5,1))) if (FALSE) { diagnose_design(designs) }"},{"path":"https://declaredesign.org/r/designlibrary/news/index.html","id":"designlibrary-0110","dir":"Changelog","previous_headings":"","what":"DesignLibrary 0.1.10","title":"DesignLibrary 0.1.10","text":"CRAN release: 2021-10-18 updates syntax DeclareDesign v. 0.28.0","code":""},{"path":"https://declaredesign.org/r/designlibrary/news/index.html","id":"designlibrary-018","dir":"Changelog","previous_headings":"","what":"DesignLibrary 0.1.8","title":"DesignLibrary 0.1.8","text":"CRAN release: 2021-09-02 Update syntax DeclareDesign v. 0.28.0","code":""},{"path":"https://declaredesign.org/r/designlibrary/news/index.html","id":"designlibrary-016","dir":"Changelog","previous_headings":"","what":"DesignLibrary 0.1.6","title":"DesignLibrary 0.1.6","text":"CRAN release: 2021-03-02 Update syntax: declare_estimands -> declare_inquiries","code":""},{"path":"https://declaredesign.org/r/designlibrary/news/index.html","id":"designlibrary-0155","dir":"Changelog","previous_headings":"","what":"DesignLibrary 0.1.5.5","title":"DesignLibrary 0.1.5.5","text":"CRAN release: 2020-12-01 Removed broken URL package documentation","code":""},{"path":"https://declaredesign.org/r/designlibrary/news/index.html","id":"designlibrary-015","dir":"Changelog","previous_headings":"","what":"DesignLibrary 0.1.5","title":"DesignLibrary 0.1.5","text":"fixed bug randomized_response_designer diagnosands deprecated label_estimator()","code":""},{"path":"https://declaredesign.org/r/designlibrary/news/index.html","id":"designlibrary-014","dir":"Changelog","previous_headings":"","what":"DesignLibrary 0.1.4","title":"DesignLibrary 0.1.4","text":"CRAN release: 2019-06-17 updated tests compatible rlang 0.3.0 fixed bug designers resulted holding args fixed","code":""},{"path":"https://declaredesign.org/r/designlibrary/news/index.html","id":"designlibrary-013","dir":"Changelog","previous_headings":"","what":"DesignLibrary 0.1.3","title":"DesignLibrary 0.1.3","text":"CRAN release: 2019-05-02 updated code compatible new DeclareDesign version CRAN (fixes bugs breaking CRAN checks) added dependency glue better less rlang- heavy handling strings construct_design_code() vastly improved changed fixed args_to_fix made possible every designer added definitions attributes designers integrate better external shiny app added new error handling cases weren’t handled improved correlation handling block_cluster_two_arm_designer(), mediation_analysis_designer(), pretest_posttest_designer() updated estimands binary_iv_designer()","code":""},{"path":"https://declaredesign.org/r/designlibrary/news/index.html","id":"designlibrary-012","dir":"Changelog","previous_headings":"","what":"DesignLibrary 0.1.2","title":"DesignLibrary 0.1.2","text":"CRAN release: 2018-11-12 Renamed deprecated simple_* designers: simple_two_arm_designer() -> two_arm_designer(), simple_spillover_designer() -> spillover_designer(), simple_iv_designer() -> binary_iv_designer(), simple_factorial_designer() -> two_by_two_designer() Added tests new DeclareDesign functionality Updated names DeclareDesign helpers (draw_estimates, etc.) Enabled specification block-level assignment probabilities block_cluster_two_arm_designer() Fixed bug factorial_designer() multi_arm_designer() breaking substitution fixed = argument used Small cosmetic edits pretest_posttest_designer() Fixed estimator labels multi_arm_designer() Small updates warning error messages : block_cluster_two_arm_designer() cluster_sampling_designer() Added PR template contributing designers Improved handling variance block_cluster_two_arm_designer(), including verbose messaging Imported tidy generics following update estimatr (>= 0.14.0)","code":""},{"path":"https://declaredesign.org/r/designlibrary/news/index.html","id":"designlibrary-011","dir":"Changelog","previous_headings":"","what":"DesignLibrary 0.1.1","title":"DesignLibrary 0.1.1","text":"CRAN release: 2018-08-25 Added designer process-tracing designs (process_tracing_designer()) Added designer simple instrumental variables designs (simple_iv_designer()) Added new arguments regression_discontinuity_designer() allow setting variance shape potential outcomes functions Added blocking cluster_sampling_designer() Added flexible ways specify N block_cluster_two_arm_designer() Cleaned various inconsistencies documentation Cleaned dependencies DESCRIPTION Cleaner method handling global variables DesignLibrary.R Used importFrom fix notes errors check_results_DesignLibrary.html","code":""},{"path":"https://declaredesign.org/r/designlibrary/news/index.html","id":"designlibrary-010","dir":"Changelog","previous_headings":"","what":"DesignLibrary 0.1.0","title":"DesignLibrary 0.1.0","text":"CRAN release: 2018-08-09 First CRAN version","code":""}]
